[0m10:18:52.113027 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x105719390>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x105718290>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x105796a10>]}


============================== 10:18:52.114909 | 9f522427-31aa-4920-905c-cec341136c71 ==============================
[0m10:18:52.114909 [info ] [MainThread]: Running with dbt=1.7.4
[0m10:18:52.115209 [debug] [MainThread]: running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'debug': 'False', 'profiles_dir': '/Users/tom/.dbt', 'log_path': '/Users/tom/Documents/ReadyPlayerMe/dbt/dev/logs', 'version_check': 'True', 'fail_fast': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'invocation_command': 'dbt deps', 'static_parser': 'True', 'log_format': 'default', 'target_path': 'None', 'introspect': 'True', 'send_anonymous_usage_stats': 'True'}
[0m10:18:52.154795 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '9f522427-31aa-4920-905c-cec341136c71', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x105796890>]}
[0m10:18:52.155214 [info ] [MainThread]: Warning: No packages were found in packages.yml
[0m10:18:52.155566 [info ] [MainThread]: Warning: No packages were found in packages.yml
[0m10:18:52.156402 [debug] [MainThread]: Resource report: {"command_name": "deps", "command_success": true, "command_wall_clock_time": 0.06796537, "process_user_time": 0.817013, "process_kernel_time": 0.081969, "process_mem_max_rss": "109051904", "process_in_blocks": "0", "process_out_blocks": "0"}
[0m10:18:52.156690 [debug] [MainThread]: Command `dbt deps` succeeded at 10:18:52.156619 after 0.07 seconds
[0m10:18:52.156855 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1004c2690>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x100421d50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x100421c10>]}
[0m10:18:52.157015 [debug] [MainThread]: Flushing usage events
[0m10:19:25.316874 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x108b18950>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x108b7d750>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x108b19350>]}


============================== 10:19:25.319205 | 658e88b8-227d-49ba-be56-4576bed4e438 ==============================
[0m10:19:25.319205 [info ] [MainThread]: Running with dbt=1.7.4
[0m10:19:25.319503 [debug] [MainThread]: running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/Users/tom/.dbt', 'fail_fast': 'False', 'warn_error': 'None', 'log_path': '/Users/tom/Documents/ReadyPlayerMe/dbt/dev/logs', 'debug': 'False', 'version_check': 'True', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'static_parser': 'True', 'introspect': 'True', 'log_format': 'default', 'target_path': 'None', 'invocation_command': 'dbt deps', 'send_anonymous_usage_stats': 'True'}
[0m10:19:25.354229 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '658e88b8-227d-49ba-be56-4576bed4e438', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x108c08b10>]}
[0m10:19:25.354693 [info ] [MainThread]: Warning: No packages were found in packages.yml
[0m10:19:25.355064 [info ] [MainThread]: Warning: No packages were found in packages.yml
[0m10:19:25.355935 [debug] [MainThread]: Resource report: {"command_name": "deps", "command_success": true, "command_wall_clock_time": 0.062470082, "process_user_time": 0.808417, "process_kernel_time": 0.083953, "process_mem_max_rss": "109445120", "process_in_blocks": "0", "process_out_blocks": "0"}
[0m10:19:25.356242 [debug] [MainThread]: Command `dbt deps` succeeded at 10:19:25.356174 after 0.06 seconds
[0m10:19:25.356447 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x108b7ded0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x102d99d50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x102e3a550>]}
[0m10:19:25.356718 [debug] [MainThread]: Flushing usage events
[0m10:19:47.981180 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x111f35d90>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x111f96150>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x111f967d0>]}


============================== 10:19:47.983049 | e43cb170-85fc-4cb7-ad31-f85b4faf48e5 ==============================
[0m10:19:47.983049 [info ] [MainThread]: Running with dbt=1.7.4
[0m10:19:47.983320 [debug] [MainThread]: running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'version_check': 'True', 'debug': 'False', 'log_path': '/Users/tom/Documents/ReadyPlayerMe/dbt/dev/logs', 'fail_fast': 'False', 'profiles_dir': '/Users/tom/.dbt', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'log_format': 'default', 'introspect': 'True', 'static_parser': 'True', 'invocation_command': 'dbt deps', 'target_path': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'send_anonymous_usage_stats': 'True'}
[0m10:19:48.018886 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'e43cb170-85fc-4cb7-ad31-f85b4faf48e5', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x111f7dc50>]}
[0m10:19:48.019920 [debug] [MainThread]: Set downloads directory='/var/folders/gc/7wj_hz8n0cn8b9rtd1d4_6vr0000gn/T/dbt-downloads-jt63s13h'
[0m10:19:48.020191 [debug] [MainThread]: Making package index registry request: GET https://hub.getdbt.com/api/v1/index.json
[0m10:19:48.128040 [debug] [MainThread]: Response from registry index: GET https://hub.getdbt.com/api/v1/index.json 200
[0m10:19:48.129463 [debug] [MainThread]: Making package registry request: GET https://hub.getdbt.com/api/v1/dbt-labs/codegen.json
[0m10:19:48.180051 [debug] [MainThread]: Response from registry: GET https://hub.getdbt.com/api/v1/dbt-labs/codegen.json 200
[0m10:19:48.181812 [debug] [MainThread]: Making package registry request: GET https://hub.getdbt.com/api/v1/dbt-labs/dbt_utils.json
[0m10:19:48.230214 [debug] [MainThread]: Response from registry: GET https://hub.getdbt.com/api/v1/dbt-labs/dbt_utils.json 200
[0m10:19:48.235975 [info ] [MainThread]: Updating lock file in file path: /Users/tom/Documents/ReadyPlayerMe/dbt/dev/package-lock.yml
[0m10:19:48.237729 [debug] [MainThread]: Set downloads directory='/var/folders/gc/7wj_hz8n0cn8b9rtd1d4_6vr0000gn/T/dbt-downloads-hkmw166c'
[0m10:19:48.239949 [info ] [MainThread]: Installing dbt-labs/codegen
[0m10:19:48.515597 [info ] [MainThread]: Installed from version 0.12.1
[0m10:19:48.516080 [info ] [MainThread]: Up to date!
[0m10:19:48.516457 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'package', 'label': 'e43cb170-85fc-4cb7-ad31-f85b4faf48e5', 'property_': 'install', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x111f7c110>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x111f7ce50>]}
[0m10:19:48.516779 [info ] [MainThread]: Installing dbt-labs/dbt_utils
[0m10:19:48.859776 [info ] [MainThread]: Installed from version 1.1.1
[0m10:19:48.860077 [info ] [MainThread]: Up to date!
[0m10:19:48.860290 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'package', 'label': 'e43cb170-85fc-4cb7-ad31-f85b4faf48e5', 'property_': 'install', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1120aabd0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1120a8b90>]}
[0m10:19:48.861893 [debug] [MainThread]: Resource report: {"command_name": "deps", "command_success": true, "command_wall_clock_time": 0.90451914, "process_user_time": 0.913389, "process_kernel_time": 0.147327, "process_mem_max_rss": "115326976", "process_in_blocks": "0", "process_out_blocks": "0"}
[0m10:19:48.862246 [debug] [MainThread]: Command `dbt deps` succeeded at 10:19:48.862171 after 0.90 seconds
[0m10:19:48.862446 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x102b01d50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x102aea110>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x110e22ad0>]}
[0m10:19:48.862638 [debug] [MainThread]: Flushing usage events
[0m10:21:19.595667 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10b519890>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10b5960d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10b596750>]}


============================== 10:21:19.598018 | 78eada88-9b9a-49d9-9023-aff4300043b3 ==============================
[0m10:21:19.598018 [info ] [MainThread]: Running with dbt=1.7.4
[0m10:21:19.598297 [debug] [MainThread]: running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/Users/tom/.dbt', 'version_check': 'True', 'fail_fast': 'False', 'log_path': '/Users/tom/Documents/ReadyPlayerMe/dbt/dev/logs', 'warn_error': 'None', 'debug': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'introspect': 'True', 'log_format': 'default', 'invocation_command': 'dbt run-operation generate_source --args {"schema_name": "source", "table_names":["source_users"], "generate_columns": "true", "include_data_types": "true"}', 'target_path': 'None', 'static_parser': 'True', 'send_anonymous_usage_stats': 'True'}
[0m10:21:19.754019 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '78eada88-9b9a-49d9-9023-aff4300043b3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10c42af10>]}
[0m10:21:19.787212 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '78eada88-9b9a-49d9-9023-aff4300043b3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10c42af10>]}
[0m10:21:19.787832 [info ] [MainThread]: Registered adapter: redshift=1.7.1
[0m10:21:19.796435 [debug] [MainThread]: checksum: 248e8aba381ba2d577dce7ab50d2010c2aac45d2b27e6e6214cdd96d2d41fabc, vars: {}, profile: , target: , version: 1.7.4
[0m10:21:19.797179 [info ] [MainThread]: Unable to do partial parsing because saved manifest not found. Starting full parse.
[0m10:21:19.797419 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'partial_parser', 'label': '78eada88-9b9a-49d9-9023-aff4300043b3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10cdc3e50>]}
[0m10:21:20.327192 [warn ] [MainThread]: [[33mWARNING[0m]: Configuration paths exist in your dbt_project.yml file which do not apply to any resources.
There are 1 unused configuration paths:
- models.dev.example
[0m10:21:20.329506 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '78eada88-9b9a-49d9-9023-aff4300043b3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10cd1da90>]}
[0m10:21:20.333776 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '78eada88-9b9a-49d9-9023-aff4300043b3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10d23a290>]}
[0m10:21:20.334009 [info ] [MainThread]: Found 0 sources, 0 exposures, 0 metrics, 591 macros, 0 groups, 0 semantic models
[0m10:21:20.334170 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '78eada88-9b9a-49d9-9023-aff4300043b3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10a8b2190>]}
[0m10:21:20.334538 [debug] [MainThread]: Acquiring new redshift connection 'macro_generate_source'
[0m10:21:20.336559 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m10:21:20.336687 [debug] [MainThread]: On macro_generate_source: BEGIN
[0m10:21:20.336802 [debug] [MainThread]: Opening a new connection, currently in state init
[0m10:21:20.338263 [debug] [MainThread]: Redshift adapter: Establishing connection using ssl with `sslmode` set to 'prefer'.To connect without ssl, set `sslmode` to 'disable'.
[0m10:21:20.338417 [debug] [MainThread]: Redshift adapter: Connecting to redshift with username/password based auth...
[0m10:21:21.212380 [debug] [MainThread]: SQL status: SUCCESS in 1.0 seconds
[0m10:21:21.214023 [debug] [MainThread]: On macro_generate_source: COMMIT
[0m10:21:21.215294 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m10:21:21.215888 [debug] [MainThread]: On macro_generate_source: COMMIT
[0m10:21:21.389721 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m10:21:21.424673 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m10:21:21.425185 [debug] [MainThread]: On macro_generate_source: BEGIN
[0m10:21:21.511933 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m10:21:21.512891 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m10:21:21.513359 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'source_users'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'source_users'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'source_users'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m10:21:21.931287 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m10:21:21.954040 [debug] [MainThread]: On macro_generate_source: ROLLBACK
[0m10:21:22.172079 [debug] [MainThread]: On macro_generate_source: Close
[0m10:21:22.175641 [debug] [MainThread]: Resource report: {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.605989, "process_user_time": 1.539733, "process_kernel_time": 0.170626, "process_mem_max_rss": "131776512", "process_in_blocks": "0", "process_out_blocks": "0"}
[0m10:21:22.176075 [debug] [MainThread]: Command `dbt run-operation` succeeded at 10:21:22.175990 after 2.61 seconds
[0m10:21:22.176280 [debug] [MainThread]: Connection 'macro_generate_source' was properly closed.
[0m10:21:22.176610 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10b5963d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x104a9de50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10b5a4710>]}
[0m10:21:22.177036 [debug] [MainThread]: Flushing usage events
[0m10:21:44.254901 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x110d62210>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x110db3890>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x110db3b90>]}


============================== 10:21:44.258880 | d0a8a89d-3c74-4e13-b1c9-e86b251481cf ==============================
[0m10:21:44.258880 [info ] [MainThread]: Running with dbt=1.7.4
[0m10:21:44.259461 [debug] [MainThread]: running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'debug': 'False', 'fail_fast': 'False', 'log_path': '/Users/tom/Documents/ReadyPlayerMe/dbt/dev/logs', 'profiles_dir': '/Users/tom/.dbt', 'version_check': 'True', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'log_format': 'default', 'static_parser': 'True', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'introspect': 'True', 'target_path': 'None', 'invocation_command': 'dbt run-operation generate_source --args {"schema_name": "source", "table_names":["source_users"], "generate_columns": "true", "include_data_types": "true"}', 'send_anonymous_usage_stats': 'True'}
[0m10:21:44.378533 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'd0a8a89d-3c74-4e13-b1c9-e86b251481cf', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x110db2f10>]}
[0m10:21:44.411663 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'd0a8a89d-3c74-4e13-b1c9-e86b251481cf', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x110dd1d10>]}
[0m10:21:44.412174 [info ] [MainThread]: Registered adapter: redshift=1.7.1
[0m10:21:44.420277 [debug] [MainThread]: checksum: 248e8aba381ba2d577dce7ab50d2010c2aac45d2b27e6e6214cdd96d2d41fabc, vars: {}, profile: , target: , version: 1.7.4
[0m10:21:44.437416 [debug] [MainThread]: Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.
[0m10:21:44.437643 [debug] [MainThread]: Partial parsing enabled, no changes found, skipping parsing
[0m10:21:44.437828 [warn ] [MainThread]: [[33mWARNING[0m]: Configuration paths exist in your dbt_project.yml file which do not apply to any resources.
There are 1 unused configuration paths:
- models.dev.example
[0m10:21:44.440254 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'd0a8a89d-3c74-4e13-b1c9-e86b251481cf', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x112264ed0>]}
[0m10:21:44.445822 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'd0a8a89d-3c74-4e13-b1c9-e86b251481cf', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1121b8e50>]}
[0m10:21:44.446100 [info ] [MainThread]: Found 0 sources, 0 exposures, 0 metrics, 591 macros, 0 groups, 0 semantic models
[0m10:21:44.446260 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'd0a8a89d-3c74-4e13-b1c9-e86b251481cf', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1116f3b90>]}
[0m10:21:44.446639 [debug] [MainThread]: Acquiring new redshift connection 'macro_generate_source'
[0m10:21:44.448771 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m10:21:44.448910 [debug] [MainThread]: On macro_generate_source: BEGIN
[0m10:21:44.449031 [debug] [MainThread]: Opening a new connection, currently in state init
[0m10:21:44.450531 [debug] [MainThread]: Redshift adapter: Establishing connection using ssl with `sslmode` set to 'prefer'.To connect without ssl, set `sslmode` to 'disable'.
[0m10:21:44.450687 [debug] [MainThread]: Redshift adapter: Connecting to redshift with username/password based auth...
[0m10:21:45.362003 [debug] [MainThread]: SQL status: SUCCESS in 1.0 seconds
[0m10:21:45.363981 [debug] [MainThread]: On macro_generate_source: COMMIT
[0m10:21:45.364486 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m10:21:45.364804 [debug] [MainThread]: On macro_generate_source: COMMIT
[0m10:21:45.599172 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m10:21:45.619319 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m10:21:45.619674 [debug] [MainThread]: On macro_generate_source: BEGIN
[0m10:21:45.717726 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m10:21:45.718160 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m10:21:45.718497 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'source_users'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'source_users'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'source_users'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m10:21:46.113241 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m10:21:46.125463 [debug] [MainThread]: On macro_generate_source: ROLLBACK
[0m10:21:46.348746 [debug] [MainThread]: On macro_generate_source: Close
[0m10:21:46.352509 [debug] [MainThread]: Resource report: {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.1191547, "process_user_time": 1.027787, "process_kernel_time": 0.124382, "process_mem_max_rss": "129908736", "process_in_blocks": "0", "process_out_blocks": "0"}
[0m10:21:46.353131 [debug] [MainThread]: Command `dbt run-operation` succeeded at 10:21:46.352993 after 2.12 seconds
[0m10:21:46.353450 [debug] [MainThread]: Connection 'macro_generate_source' was properly closed.
[0m10:21:46.353783 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x110dd2750>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x112288590>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1121b88d0>]}
[0m10:21:46.354152 [debug] [MainThread]: Flushing usage events
[0m10:29:02.037346 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10ac19c10>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10ac7d610>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10ac96bd0>]}


============================== 10:29:02.040323 | b75c2a13-e43a-4bf4-a18b-d162098d751e ==============================
[0m10:29:02.040323 [info ] [MainThread]: Running with dbt=1.7.4
[0m10:29:02.040631 [debug] [MainThread]: running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'debug': 'False', 'version_check': 'True', 'log_path': '/Users/tom/Documents/ReadyPlayerMe/dbt/dev/logs', 'fail_fast': 'False', 'profiles_dir': '/Users/tom/.dbt', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'log_format': 'default', 'invocation_command': 'dbt run-operation generate_source --args {"schema_name": "source", "table_names":["source_organization_users"], "generate_columns": "true", "include_data_types": "true"}', 'static_parser': 'True', 'introspect': 'True', 'target_path': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'send_anonymous_usage_stats': 'True'}
[0m10:29:02.205000 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'b75c2a13-e43a-4bf4-a18b-d162098d751e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10ac522d0>]}
[0m10:29:02.241450 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'b75c2a13-e43a-4bf4-a18b-d162098d751e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10c031f50>]}
[0m10:29:02.242140 [info ] [MainThread]: Registered adapter: redshift=1.7.1
[0m10:29:02.254456 [debug] [MainThread]: checksum: 248e8aba381ba2d577dce7ab50d2010c2aac45d2b27e6e6214cdd96d2d41fabc, vars: {}, profile: , target: , version: 1.7.4
[0m10:29:02.293766 [debug] [MainThread]: Partial parsing enabled: 0 files deleted, 1 files added, 0 files changed.
[0m10:29:02.294130 [debug] [MainThread]: Partial parsing: added file: dev://models/sources.yml
[0m10:29:02.364439 [warn ] [MainThread]: [[33mWARNING[0m]: Configuration paths exist in your dbt_project.yml file which do not apply to any resources.
There are 1 unused configuration paths:
- models.dev.example
[0m10:29:02.367069 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'b75c2a13-e43a-4bf4-a18b-d162098d751e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10c04ad90>]}
[0m10:29:02.372269 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'b75c2a13-e43a-4bf4-a18b-d162098d751e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10c91be50>]}
[0m10:29:02.372503 [info ] [MainThread]: Found 1 source, 0 exposures, 0 metrics, 591 macros, 0 groups, 0 semantic models
[0m10:29:02.372646 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'b75c2a13-e43a-4bf4-a18b-d162098d751e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10c91b150>]}
[0m10:29:02.372990 [debug] [MainThread]: Acquiring new redshift connection 'macro_generate_source'
[0m10:29:02.375017 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m10:29:02.375148 [debug] [MainThread]: On macro_generate_source: BEGIN
[0m10:29:02.375263 [debug] [MainThread]: Opening a new connection, currently in state init
[0m10:29:02.376695 [debug] [MainThread]: Redshift adapter: Establishing connection using ssl with `sslmode` set to 'prefer'.To connect without ssl, set `sslmode` to 'disable'.
[0m10:29:02.376846 [debug] [MainThread]: Redshift adapter: Connecting to redshift with username/password based auth...
[0m10:29:03.501080 [debug] [MainThread]: SQL status: SUCCESS in 1.0 seconds
[0m10:29:03.501892 [debug] [MainThread]: On macro_generate_source: COMMIT
[0m10:29:03.502562 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m10:29:03.503001 [debug] [MainThread]: On macro_generate_source: COMMIT
[0m10:29:03.710142 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m10:29:03.748111 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m10:29:03.748484 [debug] [MainThread]: On macro_generate_source: BEGIN
[0m10:29:03.850938 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m10:29:03.851310 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m10:29:03.851625 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'source_organization_users'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'source_organization_users'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'source_organization_users'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m10:29:04.330382 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m10:29:04.350308 [debug] [MainThread]: On macro_generate_source: ROLLBACK
[0m10:29:04.598524 [debug] [MainThread]: On macro_generate_source: Close
[0m10:29:04.607511 [debug] [MainThread]: Resource report: {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.5950515, "process_user_time": 1.153928, "process_kernel_time": 0.181402, "process_mem_max_rss": "132169728", "process_in_blocks": "0", "process_out_blocks": "0"}
[0m10:29:04.608762 [debug] [MainThread]: Command `dbt run-operation` succeeded at 10:29:04.608562 after 2.60 seconds
[0m10:29:04.609297 [debug] [MainThread]: Connection 'macro_generate_source' was properly closed.
[0m10:29:04.609811 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10c91ad90>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10c04af90>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10cb03990>]}
[0m10:29:04.610353 [debug] [MainThread]: Flushing usage events
[0m10:33:46.321273 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x118819c10>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11887d750>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x118896390>]}


============================== 10:33:46.324481 | 253b510f-fd2e-4f2b-b3c0-1fdc8c89a246 ==============================
[0m10:33:46.324481 [info ] [MainThread]: Running with dbt=1.7.4
[0m10:33:46.324785 [debug] [MainThread]: running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'fail_fast': 'False', 'version_check': 'True', 'log_path': '/Users/tom/Documents/ReadyPlayerMe/dbt/dev/logs', 'debug': 'False', 'profiles_dir': '/Users/tom/.dbt', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'log_format': 'default', 'invocation_command': 'dbt debug', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'introspect': 'True', 'target_path': 'None', 'static_parser': 'True', 'send_anonymous_usage_stats': 'True'}
[0m10:33:46.325067 [info ] [MainThread]: dbt version: 1.7.4
[0m10:33:46.325226 [info ] [MainThread]: python version: 3.11.6
[0m10:33:46.325371 [info ] [MainThread]: python path: /Users/tom/Documents/ReadyPlayerMe/dbt/venv/bin/python3.11
[0m10:33:46.325502 [info ] [MainThread]: os info: macOS-14.1-arm64-arm-64bit
[0m10:33:46.452289 [info ] [MainThread]: Using profiles dir at /Users/tom/.dbt
[0m10:33:46.452688 [info ] [MainThread]: Using profiles.yml file at /Users/tom/.dbt/profiles.yml
[0m10:33:46.452842 [info ] [MainThread]: Using dbt_project.yml file at /Users/tom/Documents/ReadyPlayerMe/dbt/dev/dbt_project.yml
[0m10:33:46.453257 [info ] [MainThread]: adapter type: redshift
[0m10:33:46.453438 [info ] [MainThread]: adapter version: 1.7.1
[0m10:33:46.485473 [info ] [MainThread]: Configuration:
[0m10:33:46.485741 [info ] [MainThread]:   profiles.yml file [[32mOK found and valid[0m]
[0m10:33:46.485892 [info ] [MainThread]:   dbt_project.yml file [[32mOK found and valid[0m]
[0m10:33:46.486024 [info ] [MainThread]: Required dependencies:
[0m10:33:46.486200 [debug] [MainThread]: Executing "git --help"
[0m10:33:46.508803 [debug] [MainThread]: STDOUT: "b"usage: git [-v | --version] [-h | --help] [-C <path>] [-c <name>=<value>]\n           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\n           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]\n           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]\n           [--super-prefix=<path>] [--config-env=<name>=<envvar>]\n           <command> [<args>]\n\nThese are common Git commands used in various situations:\n\nstart a working area (see also: git help tutorial)\n   clone     Clone a repository into a new directory\n   init      Create an empty Git repository or reinitialize an existing one\n\nwork on the current change (see also: git help everyday)\n   add       Add file contents to the index\n   mv        Move or rename a file, a directory, or a symlink\n   restore   Restore working tree files\n   rm        Remove files from the working tree and from the index\n\nexamine the history and state (see also: git help revisions)\n   bisect    Use binary search to find the commit that introduced a bug\n   diff      Show changes between commits, commit and working tree, etc\n   grep      Print lines matching a pattern\n   log       Show commit logs\n   show      Show various types of objects\n   status    Show the working tree status\n\ngrow, mark and tweak your common history\n   branch    List, create, or delete branches\n   commit    Record changes to the repository\n   merge     Join two or more development histories together\n   rebase    Reapply commits on top of another base tip\n   reset     Reset current HEAD to the specified state\n   switch    Switch branches\n   tag       Create, list, delete or verify a tag object signed with GPG\n\ncollaborate (see also: git help workflows)\n   fetch     Download objects and refs from another repository\n   pull      Fetch from and integrate with another repository or a local branch\n   push      Update remote refs along with associated objects\n\n'git help -a' and 'git help -g' list available subcommands and some\nconcept guides. See 'git help <command>' or 'git help <concept>'\nto read about a specific subcommand or concept.\nSee 'git help git' for an overview of the system.\n""
[0m10:33:46.509344 [debug] [MainThread]: STDERR: "b''"
[0m10:33:46.509546 [info ] [MainThread]:  - git [[32mOK found[0m]

[0m10:33:46.509702 [info ] [MainThread]: Connection:
[0m10:33:46.509890 [info ] [MainThread]:   host: analytics-prod-us1.cklugnwhukht.us-east-1.redshift.amazonaws.com
[0m10:33:46.510013 [info ] [MainThread]:   user: admin
[0m10:33:46.510128 [info ] [MainThread]:   port: 5439
[0m10:33:46.510243 [info ] [MainThread]:   database: analytics
[0m10:33:46.510364 [info ] [MainThread]:   method: database
[0m10:33:46.510475 [info ] [MainThread]:   cluster_id: None
[0m10:33:46.510592 [info ] [MainThread]:   iam_profile: None
[0m10:33:46.510708 [info ] [MainThread]:   schema: loads
[0m10:33:46.510820 [info ] [MainThread]:   sslmode: prefer
[0m10:33:46.510997 [info ] [MainThread]:   region: None
[0m10:33:46.511201 [info ] [MainThread]:   sslmode: prefer
[0m10:33:46.511336 [info ] [MainThread]:   region: None
[0m10:33:46.511458 [info ] [MainThread]:   iam_profile: None
[0m10:33:46.511576 [info ] [MainThread]:   autocreate: False
[0m10:33:46.511691 [info ] [MainThread]:   db_groups: []
[0m10:33:46.511803 [info ] [MainThread]:   ra3_node: False
[0m10:33:46.511911 [info ] [MainThread]:   connect_timeout: None
[0m10:33:46.512019 [info ] [MainThread]:   role: None
[0m10:33:46.512127 [info ] [MainThread]:   retries: 1
[0m10:33:46.512345 [info ] [MainThread]:   autocommit: True
[0m10:33:46.512693 [info ] [MainThread]: Registered adapter: redshift=1.7.1
[0m10:33:46.513130 [debug] [MainThread]: Acquiring new redshift connection 'debug'
[0m10:33:46.515675 [debug] [MainThread]: Using redshift connection "debug"
[0m10:33:46.515903 [debug] [MainThread]: On debug: select 1 as id
[0m10:33:46.516044 [debug] [MainThread]: Opening a new connection, currently in state init
[0m10:33:46.518960 [debug] [MainThread]: Redshift adapter: Establishing connection using ssl with `sslmode` set to 'prefer'.To connect without ssl, set `sslmode` to 'disable'.
[0m10:33:46.519165 [debug] [MainThread]: Redshift adapter: Connecting to redshift with username/password based auth...
[0m10:33:47.574504 [debug] [MainThread]: SQL status: SUCCESS in 1.0 seconds
[0m10:33:47.576875 [debug] [MainThread]: On debug: Close
[0m10:33:47.578903 [info ] [MainThread]:   Connection test: [[32mOK connection ok[0m]

[0m10:33:47.579790 [info ] [MainThread]: [32mAll checks passed![0m
[0m10:33:47.583639 [debug] [MainThread]: Resource report: {"command_name": "debug", "command_success": true, "command_wall_clock_time": 1.288021, "process_user_time": 0.947869, "process_kernel_time": 0.171382, "process_mem_max_rss": "123813888", "process_in_blocks": "0", "process_out_blocks": "0"}
[0m10:33:47.584699 [debug] [MainThread]: Command `dbt debug` succeeded at 10:33:47.584520 after 1.29 seconds
[0m10:33:47.585138 [debug] [MainThread]: Connection 'debug' was properly closed.
[0m10:33:47.585601 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1060c3310>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x100e3a110>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x100e52090>]}
[0m10:33:47.586739 [debug] [MainThread]: Flushing usage events
[0m10:33:54.331253 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11311a550>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1131963d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x113196a50>]}


============================== 10:33:54.333096 | 7ab93468-3e23-471d-a584-5e3b25919619 ==============================
[0m10:33:54.333096 [info ] [MainThread]: Running with dbt=1.7.4
[0m10:33:54.333365 [debug] [MainThread]: running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'debug': 'False', 'fail_fast': 'False', 'log_path': '/Users/tom/Documents/ReadyPlayerMe/dbt/dev/logs', 'profiles_dir': '/Users/tom/.dbt', 'version_check': 'True', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'log_format': 'default', 'static_parser': 'True', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'invocation_command': 'dbt run', 'target_path': 'None', 'introspect': 'True', 'send_anonymous_usage_stats': 'True'}
[0m10:33:54.457914 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '7ab93468-3e23-471d-a584-5e3b25919619', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x113da4390>]}
[0m10:33:54.491892 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '7ab93468-3e23-471d-a584-5e3b25919619', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x113dce050>]}
[0m10:33:54.492369 [info ] [MainThread]: Registered adapter: redshift=1.7.1
[0m10:33:54.501199 [debug] [MainThread]: checksum: 248e8aba381ba2d577dce7ab50d2010c2aac45d2b27e6e6214cdd96d2d41fabc, vars: {}, profile: , target: , version: 1.7.4
[0m10:33:54.540789 [debug] [MainThread]: Partial parsing enabled: 0 files deleted, 3 files added, 1 files changed.
[0m10:33:54.541090 [debug] [MainThread]: Partial parsing: added file: dev://models/reconf/stg/src/stg___source__source_organization_users.sql
[0m10:33:54.541329 [debug] [MainThread]: Partial parsing: added file: dev://models/reconf/stg/src/stg___source__source_organization_users.yml
[0m10:33:54.541509 [debug] [MainThread]: Partial parsing: added file: dev://macros/reconf/dbt_reconf.sql
[0m10:33:54.541743 [debug] [MainThread]: Partial parsing: updated file: dev://models/sources.yml
[0m10:33:54.782277 [warn ] [MainThread]: [[33mWARNING[0m]: Configuration paths exist in your dbt_project.yml file which do not apply to any resources.
There are 1 unused configuration paths:
- models.dev.example
[0m10:33:54.784666 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '7ab93468-3e23-471d-a584-5e3b25919619', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x114b4f6d0>]}
[0m10:33:54.792017 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '7ab93468-3e23-471d-a584-5e3b25919619', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x114573b50>]}
[0m10:33:54.792413 [info ] [MainThread]: Found 1 model, 3 tests, 2 sources, 0 exposures, 0 metrics, 662 macros, 0 groups, 0 semantic models
[0m10:33:54.792656 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '7ab93468-3e23-471d-a584-5e3b25919619', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x114b3a1d0>]}
[0m10:33:54.793521 [info ] [MainThread]: 
[0m10:33:54.794020 [debug] [MainThread]: Acquiring new redshift connection 'master'
[0m10:33:54.794705 [debug] [ThreadPool]: Acquiring new redshift connection 'list_analytics'
[0m10:33:54.801784 [debug] [ThreadPool]: Using redshift connection "list_analytics"
[0m10:33:54.802016 [debug] [ThreadPool]: On list_analytics: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "list_analytics"} */

    select distinct nspname from pg_namespace
[0m10:33:54.802158 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m10:33:54.803720 [debug] [ThreadPool]: Redshift adapter: Establishing connection using ssl with `sslmode` set to 'prefer'.To connect without ssl, set `sslmode` to 'disable'.
[0m10:33:54.803898 [debug] [ThreadPool]: Redshift adapter: Connecting to redshift with username/password based auth...
[0m10:33:55.582771 [debug] [ThreadPool]: SQL status: SUCCESS in 1.0 seconds
[0m10:33:55.587338 [debug] [ThreadPool]: On list_analytics: Close
[0m10:33:55.590725 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_analytics, now create_analytics_loads_stg)
[0m10:33:55.591986 [debug] [ThreadPool]: Creating schema "database: "analytics"
schema: "loads_stg"
"
[0m10:33:55.601440 [debug] [ThreadPool]: Using redshift connection "create_analytics_loads_stg"
[0m10:33:55.601785 [debug] [ThreadPool]: On create_analytics_loads_stg: BEGIN
[0m10:33:55.601960 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m10:33:55.602234 [debug] [ThreadPool]: Redshift adapter: Establishing connection using ssl with `sslmode` set to 'prefer'.To connect without ssl, set `sslmode` to 'disable'.
[0m10:33:55.602410 [debug] [ThreadPool]: Redshift adapter: Connecting to redshift with username/password based auth...
[0m10:33:56.346194 [debug] [ThreadPool]: SQL status: SUCCESS in 1.0 seconds
[0m10:33:56.346912 [debug] [ThreadPool]: Using redshift connection "create_analytics_loads_stg"
[0m10:33:56.347272 [debug] [ThreadPool]: On create_analytics_loads_stg: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "create_analytics_loads_stg"} */
create schema if not exists "loads_stg"
[0m10:33:56.717534 [debug] [ThreadPool]: SQL status: SUCCESS in 0.0 seconds
[0m10:33:56.720128 [debug] [ThreadPool]: On create_analytics_loads_stg: COMMIT
[0m10:33:56.721344 [debug] [ThreadPool]: Using redshift connection "create_analytics_loads_stg"
[0m10:33:56.722036 [debug] [ThreadPool]: On create_analytics_loads_stg: COMMIT
[0m10:33:57.018091 [debug] [ThreadPool]: SQL status: SUCCESS in 0.0 seconds
[0m10:33:57.019715 [debug] [ThreadPool]: On create_analytics_loads_stg: Close
[0m10:33:57.024599 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly create_analytics_loads_stg, now list_analytics_loads_stg)
[0m10:33:57.038097 [debug] [ThreadPool]: Using redshift connection "list_analytics_loads_stg"
[0m10:33:57.038541 [debug] [ThreadPool]: On list_analytics_loads_stg: BEGIN
[0m10:33:57.038754 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m10:33:57.039140 [debug] [ThreadPool]: Redshift adapter: Establishing connection using ssl with `sslmode` set to 'prefer'.To connect without ssl, set `sslmode` to 'disable'.
[0m10:33:57.039483 [debug] [ThreadPool]: Redshift adapter: Connecting to redshift with username/password based auth...
[0m10:33:57.860972 [debug] [ThreadPool]: SQL status: SUCCESS in 1.0 seconds
[0m10:33:57.862799 [debug] [ThreadPool]: Using redshift connection "list_analytics_loads_stg"
[0m10:33:57.864364 [debug] [ThreadPool]: On list_analytics_loads_stg: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "list_analytics_loads_stg"} */
select
        table_catalog as database,
        table_name as name,
        table_schema as schema,
        'table' as type
    from information_schema.tables
    where table_schema ilike 'loads_stg'
    and table_type = 'BASE TABLE'
    union all
    select
      table_catalog as database,
      table_name as name,
      table_schema as schema,
      case
        when view_definition ilike '%create materialized view%'
          then 'materialized_view'
        else 'view'
      end as type
    from information_schema.views
    where table_schema ilike 'loads_stg'
[0m10:33:58.095458 [debug] [ThreadPool]: SQL status: SUCCESS in 0.0 seconds
[0m10:33:58.097870 [debug] [ThreadPool]: On list_analytics_loads_stg: ROLLBACK
[0m10:33:58.300350 [debug] [ThreadPool]: On list_analytics_loads_stg: Close
[0m10:33:58.314975 [debug] [MainThread]: Using redshift connection "master"
[0m10:33:58.315564 [debug] [MainThread]: On master: BEGIN
[0m10:33:58.315855 [debug] [MainThread]: Opening a new connection, currently in state init
[0m10:33:58.316358 [debug] [MainThread]: Redshift adapter: Establishing connection using ssl with `sslmode` set to 'prefer'.To connect without ssl, set `sslmode` to 'disable'.
[0m10:33:58.316705 [debug] [MainThread]: Redshift adapter: Connecting to redshift with username/password based auth...
[0m10:33:59.139718 [debug] [MainThread]: SQL status: SUCCESS in 1.0 seconds
[0m10:33:59.141342 [debug] [MainThread]: Using redshift connection "master"
[0m10:33:59.142540 [debug] [MainThread]: On master: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "master"} */
with
    relation as (
        select
            pg_class.oid as relation_id,
            pg_class.relname as relation_name,
            pg_class.relnamespace as schema_id,
            pg_namespace.nspname as schema_name,
            pg_class.relkind as relation_type
        from pg_class
        join pg_namespace
          on pg_class.relnamespace = pg_namespace.oid
        where pg_namespace.nspname != 'information_schema'
          and pg_namespace.nspname not like 'pg\_%'
    ),
    dependency as (
        select distinct
            coalesce(pg_rewrite.ev_class, pg_depend.objid) as dep_relation_id,
            pg_depend.refobjid as ref_relation_id,
            pg_depend.refclassid as ref_class_id
        from pg_depend
        left join pg_rewrite
          on pg_depend.objid = pg_rewrite.oid
        where coalesce(pg_rewrite.ev_class, pg_depend.objid) != pg_depend.refobjid
    )

select distinct
    dep.schema_name as dependent_schema,
    dep.relation_name as dependent_name,
    ref.schema_name as referenced_schema,
    ref.relation_name as referenced_name
from dependency
join relation ref
    on dependency.ref_relation_id = ref.relation_id
join relation dep
    on dependency.dep_relation_id = dep.relation_id
[0m10:33:59.524647 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m10:33:59.528246 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '7ab93468-3e23-471d-a584-5e3b25919619', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x114bbcf90>]}
[0m10:33:59.528629 [debug] [MainThread]: On master: ROLLBACK
[0m10:33:59.740754 [debug] [MainThread]: Using redshift connection "master"
[0m10:33:59.741371 [debug] [MainThread]: On master: BEGIN
[0m10:33:59.837957 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m10:33:59.838387 [debug] [MainThread]: On master: COMMIT
[0m10:33:59.838681 [debug] [MainThread]: Using redshift connection "master"
[0m10:33:59.838938 [debug] [MainThread]: On master: COMMIT
[0m10:34:00.032828 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m10:34:00.033764 [debug] [MainThread]: On master: Close
[0m10:34:00.035757 [info ] [MainThread]: Concurrency: 1 threads (target='dev')
[0m10:34:00.036501 [info ] [MainThread]: 
[0m10:34:00.041350 [debug] [Thread-1 (]: Began running node model.dev.stg___source__source_organization_users
[0m10:34:00.042432 [info ] [Thread-1 (]: 1 of 1 START sql incremental model loads_stg.stg___source__source_organization_users  [RUN]
[0m10:34:00.044057 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly list_analytics_loads_stg, now model.dev.stg___source__source_organization_users)
[0m10:34:00.044719 [debug] [Thread-1 (]: Began compiling node model.dev.stg___source__source_organization_users
[0m10:34:00.072003 [debug] [Thread-1 (]: Writing injected SQL for node "model.dev.stg___source__source_organization_users"
[0m10:34:00.073600 [debug] [Thread-1 (]: Timing info for model.dev.stg___source__source_organization_users (compile): 10:34:00.045081 => 10:34:00.073375
[0m10:34:00.073912 [debug] [Thread-1 (]: Began executing node model.dev.stg___source__source_organization_users
[0m10:34:00.108822 [debug] [Thread-1 (]: Writing runtime sql for node "model.dev.stg___source__source_organization_users"
[0m10:34:00.114214 [debug] [Thread-1 (]: Using redshift connection "model.dev.stg___source__source_organization_users"
[0m10:34:00.114473 [debug] [Thread-1 (]: On model.dev.stg___source__source_organization_users: BEGIN
[0m10:34:00.114628 [debug] [Thread-1 (]: Opening a new connection, currently in state closed
[0m10:34:00.114893 [debug] [Thread-1 (]: Redshift adapter: Establishing connection using ssl with `sslmode` set to 'prefer'.To connect without ssl, set `sslmode` to 'disable'.
[0m10:34:00.115058 [debug] [Thread-1 (]: Redshift adapter: Connecting to redshift with username/password based auth...
[0m10:34:00.945663 [debug] [Thread-1 (]: SQL status: SUCCESS in 1.0 seconds
[0m10:34:00.946784 [debug] [Thread-1 (]: Using redshift connection "model.dev.stg___source__source_organization_users"
[0m10:34:00.947679 [debug] [Thread-1 (]: On model.dev.stg___source__source_organization_users: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "node_id": "model.dev.stg___source__source_organization_users"} */

      
  
    

  create  table
    "analytics"."loads_stg"."stg___source__source_organization_users"
    
    
    
  as (
    /*
BEGIN OF reconfigured.io
DO NOT EDIT this section
RCSRC(2a349b43d0a9efe7dbc1fee97dd47f04)
*/


-- Loading incremental helpers for stg___source__source_organization_users
-- End of incremental helpers
WITH
  base AS (
    WITH ___pre AS (
      SELECT
        -- Column: ___hash
        SHA2('_id' || '|' || CAST(rc1m99m23._id AS TEXT)|| '||' || 'updatedat' || '|' || CAST(rc1m99m23.updatedat AS TEXT)|| '||' || 'terms' || '|' || CAST(rc1m99m23.terms AS TEXT)|| '||' || '__hevo__ingested_at' || '|' || CAST(rc1m99m23.__hevo__ingested_at AS TEXT)|| '||' || 'deletedat' || '|' || CAST(rc1m99m23.deletedat AS TEXT)|| '||' || '__hevo__database_name' || '|' || CAST(rc1m99m23.__hevo__database_name AS TEXT)|| '||' || 'userid' || '|' || CAST(rc1m99m23.userid AS TEXT)|| '||' || '__hevo_id' || '|' || CAST(rc1m99m23.__hevo_id AS TEXT)|| '||' || '__hevo__source_modified_at' || '|' || CAST(rc1m99m23.__hevo__source_modified_at AS TEXT)|| '||' || '__v' || '|' || CAST(rc1m99m23.__v AS TEXT)|| '||' || '__hevo__marked_deleted' || '|' || CAST(rc1m99m23.__hevo__marked_deleted AS TEXT)|| '||' || 'organizationid' || '|' || CAST(rc1m99m23.organizationid AS TEXT)|| '||' || 'createdat' || '|' || CAST(rc1m99m23.createdat AS TEXT)|| '||' || '__hevo__loaded_at' || '|' || CAST(rc1m99m23.__hevo__loaded_at AS TEXT), 256)
 AS "___hash",
        -- Column: ___as_of
        CAST(rc1m99m23.createdat AS timestamp) AS "___as_of",
        -- Column: ___loaded_at
        CAST(CAST('2023-12-18T10:33:54.322533+00:00' AS timestamp) AS timestamp) AS "___loaded_at",
        -- Column: ___source_loaded_at
        CAST(CAST('2023-12-18T10:33:54.322533+00:00' AS timestamp) AS timestamp) AS "___source_loaded_at",
        -- Column: ___is_deleted
        FALSE AS "___is_deleted",
        -- Column: ___source_id
        CAST(rc1m99m23._id AS TEXT) AS "___source_id",
        -- Column: _id
        rc1m99m23._id AS "_id",
        -- Column: updatedat
        rc1m99m23.updatedat AS "updatedat",
        -- Column: terms
        rc1m99m23.terms AS "terms",
        -- Column: __hevo__ingested_at
        rc1m99m23.__hevo__ingested_at AS "__hevo__ingested_at",
        -- Column: deletedat
        rc1m99m23.deletedat AS "deletedat",
        -- Column: __hevo__database_name
        rc1m99m23.__hevo__database_name AS "__hevo__database_name",
        -- Column: userid
        rc1m99m23.userid AS "userid",
        -- Column: __hevo_id
        rc1m99m23.__hevo_id AS "__hevo_id",
        -- Column: __hevo__source_modified_at
        rc1m99m23.__hevo__source_modified_at AS "__hevo__source_modified_at",
        -- Column: __v
        rc1m99m23.__v AS "__v",
        -- Column: __hevo__marked_deleted
        rc1m99m23.__hevo__marked_deleted AS "__hevo__marked_deleted",
        -- Column: organizationid
        rc1m99m23.organizationid AS "organizationid",
        -- Column: createdat
        rc1m99m23.createdat AS "createdat",
        -- Column: __hevo__loaded_at
        rc1m99m23.__hevo__loaded_at AS "__hevo__loaded_at"
      FROM "analytics"."source"."source_organization_users" AS rc1m99m23
      WHERE ( 1 = 1 AND ( CAST('2023-12-18T10:33:54.322533+00:00' AS timestamp) <= CAST('2023-12-18T10:33:54.322533+00:00' AS timestamp) ) )
    )
    ,___rn_added AS (
      SELECT
        "___hash"
        , "___as_of"
        , "___loaded_at"
        , "___source_loaded_at"
        , "___is_deleted"
        , "___source_id"
        , "_id"
        , "updatedat"
        , "terms"
        , "__hevo__ingested_at"
        , "deletedat"
        , "__hevo__database_name"
        , "userid"
        , "__hevo_id"
        , "__hevo__source_modified_at"
        , "__v"
        , "__hevo__marked_deleted"
        , "organizationid"
        , "createdat"
        , "__hevo__loaded_at"
        , ROW_NUMBER() OVER (PARTITION BY "___hash" ORDER BY "___as_of" ASC) AS "___rn"
      FROM ___pre
    )
    SELECT
      "___hash"
      , "___as_of"
      , "___loaded_at"
      , "___source_loaded_at"
      , "___is_deleted"
      , "___source_id"
      , "_id"
      , "updatedat"
      , "terms"
      , "__hevo__ingested_at"
      , "deletedat"
      , "__hevo__database_name"
      , "userid"
      , "__hevo_id"
      , "__hevo__source_modified_at"
      , "__v"
      , "__hevo__marked_deleted"
      , "organizationid"
      , "createdat"
      , "__hevo__loaded_at"
    FROM ___rn_added
    WHERE "___rn" = 1
)
/*
feel free to edit what comes after this
END OF reconfigured.io
*/

SELECT *
FROM base
  );
[0m10:34:01.056540 [debug] [Thread-1 (]: Redshift adapter: Redshift error: cannot cast type boolean to character varying
[0m10:34:01.057681 [debug] [Thread-1 (]: On model.dev.stg___source__source_organization_users: ROLLBACK
[0m10:34:01.263764 [debug] [Thread-1 (]: Timing info for model.dev.stg___source__source_organization_users (execute): 10:34:00.074032 => 10:34:01.262053
[0m10:34:01.265735 [debug] [Thread-1 (]: On model.dev.stg___source__source_organization_users: Close
[0m10:34:01.274170 [debug] [Thread-1 (]: Database Error in model stg___source__source_organization_users (models/reconf/stg/src/stg___source__source_organization_users.sql)
  cannot cast type boolean to character varying
  compiled Code at target/run/dev/models/reconf/stg/src/stg___source__source_organization_users.sql
[0m10:34:01.275383 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '7ab93468-3e23-471d-a584-5e3b25919619', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x114430310>]}
[0m10:34:01.276136 [error] [Thread-1 (]: 1 of 1 ERROR creating sql incremental model loads_stg.stg___source__source_organization_users  [[31mERROR[0m in 1.23s]
[0m10:34:01.276602 [debug] [Thread-1 (]: Finished running node model.dev.stg___source__source_organization_users
[0m10:34:01.277931 [debug] [MainThread]: Using redshift connection "master"
[0m10:34:01.278212 [debug] [MainThread]: On master: BEGIN
[0m10:34:01.278531 [debug] [MainThread]: Opening a new connection, currently in state closed
[0m10:34:01.279058 [debug] [MainThread]: Redshift adapter: Establishing connection using ssl with `sslmode` set to 'prefer'.To connect without ssl, set `sslmode` to 'disable'.
[0m10:34:01.279356 [debug] [MainThread]: Redshift adapter: Connecting to redshift with username/password based auth...
[0m10:34:02.128408 [debug] [MainThread]: SQL status: SUCCESS in 1.0 seconds
[0m10:34:02.128910 [debug] [MainThread]: On master: COMMIT
[0m10:34:02.129266 [debug] [MainThread]: Using redshift connection "master"
[0m10:34:02.129464 [debug] [MainThread]: On master: COMMIT
[0m10:34:02.321544 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m10:34:02.321907 [debug] [MainThread]: On master: Close
[0m10:34:02.322493 [debug] [MainThread]: Connection 'master' was properly closed.
[0m10:34:02.322651 [debug] [MainThread]: Connection 'model.dev.stg___source__source_organization_users' was properly closed.
[0m10:34:02.322850 [info ] [MainThread]: 
[0m10:34:02.323032 [info ] [MainThread]: Finished running 1 incremental model in 0 hours 0 minutes and 7.53 seconds (7.53s).
[0m10:34:02.323361 [debug] [MainThread]: Command end result
[0m10:34:02.335418 [info ] [MainThread]: 
[0m10:34:02.335752 [info ] [MainThread]: [31mCompleted with 1 error and 0 warnings:[0m
[0m10:34:02.335983 [info ] [MainThread]: 
[0m10:34:02.336214 [error] [MainThread]:   Database Error in model stg___source__source_organization_users (models/reconf/stg/src/stg___source__source_organization_users.sql)
  cannot cast type boolean to character varying
  compiled Code at target/run/dev/models/reconf/stg/src/stg___source__source_organization_users.sql
[0m10:34:02.336438 [info ] [MainThread]: 
[0m10:34:02.336695 [info ] [MainThread]: Done. PASS=0 WARN=0 ERROR=1 SKIP=0 TOTAL=1
[0m10:34:02.338044 [debug] [MainThread]: Resource report: {"command_name": "run", "command_wall_clock_time": 8.029783, "process_user_time": 1.551598, "process_kernel_time": 0.166344, "process_mem_max_rss": "150290432", "command_success": false, "process_in_blocks": "0", "process_out_blocks": "0"}
[0m10:34:02.338460 [debug] [MainThread]: Command `dbt run` failed at 10:34:02.338378 after 8.03 seconds
[0m10:34:02.338757 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x103015d50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x113179ed0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11317a7d0>]}
[0m10:34:02.338973 [debug] [MainThread]: Flushing usage events
[0m10:47:17.769227 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11341bf10>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x113478610>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11305fe50>]}


============================== 10:47:17.771876 | 084b2f70-fff9-4bfc-ac51-b25ce3ab87c5 ==============================
[0m10:47:17.771876 [info ] [MainThread]: Running with dbt=1.7.4
[0m10:47:17.772209 [debug] [MainThread]: running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/Users/tom/.dbt', 'debug': 'False', 'version_check': 'True', 'log_path': '/Users/tom/Documents/ReadyPlayerMe/dbt/dev/logs', 'warn_error': 'None', 'fail_fast': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'invocation_command': 'dbt run', 'log_format': 'default', 'static_parser': 'True', 'target_path': 'None', 'introspect': 'True', 'send_anonymous_usage_stats': 'True'}
[0m10:47:17.931033 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '084b2f70-fff9-4bfc-ac51-b25ce3ab87c5', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x113dfd750>]}
[0m10:47:17.964246 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '084b2f70-fff9-4bfc-ac51-b25ce3ab87c5', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x113ddfcd0>]}
[0m10:47:17.964857 [info ] [MainThread]: Registered adapter: redshift=1.7.1
[0m10:47:17.973838 [debug] [MainThread]: checksum: 248e8aba381ba2d577dce7ab50d2010c2aac45d2b27e6e6214cdd96d2d41fabc, vars: {}, profile: , target: , version: 1.7.4
[0m10:47:18.013092 [debug] [MainThread]: Partial parsing enabled: 0 files deleted, 2 files added, 1 files changed.
[0m10:47:18.013473 [debug] [MainThread]: Partial parsing: added file: dev://models/reconf/stg/src/stg___source__source_users.yml
[0m10:47:18.013635 [debug] [MainThread]: Partial parsing: added file: dev://models/reconf/stg/src/stg___source__source_users.sql
[0m10:47:18.013910 [debug] [MainThread]: Partial parsing: updated file: dev://models/reconf/stg/src/stg___source__source_organization_users.yml
[0m10:47:18.195655 [warn ] [MainThread]: [[33mWARNING[0m]: Configuration paths exist in your dbt_project.yml file which do not apply to any resources.
There are 1 unused configuration paths:
- models.dev.example
[0m10:47:18.198933 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '084b2f70-fff9-4bfc-ac51-b25ce3ab87c5', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1149c8390>]}
[0m10:47:18.206826 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '084b2f70-fff9-4bfc-ac51-b25ce3ab87c5', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1149cb250>]}
[0m10:47:18.207129 [info ] [MainThread]: Found 2 models, 6 tests, 2 sources, 0 exposures, 0 metrics, 662 macros, 0 groups, 0 semantic models
[0m10:47:18.207302 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '084b2f70-fff9-4bfc-ac51-b25ce3ab87c5', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11496b850>]}
[0m10:47:18.208114 [info ] [MainThread]: 
[0m10:47:18.208507 [debug] [MainThread]: Acquiring new redshift connection 'master'
[0m10:47:18.209046 [debug] [ThreadPool]: Acquiring new redshift connection 'list_analytics'
[0m10:47:18.215937 [debug] [ThreadPool]: Using redshift connection "list_analytics"
[0m10:47:18.216173 [debug] [ThreadPool]: On list_analytics: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "list_analytics"} */

    select distinct nspname from pg_namespace
[0m10:47:18.216314 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m10:47:18.217785 [debug] [ThreadPool]: Redshift adapter: Establishing connection using ssl with `sslmode` set to 'prefer'.To connect without ssl, set `sslmode` to 'disable'.
[0m10:47:18.217920 [debug] [ThreadPool]: Redshift adapter: Connecting to redshift with username/password based auth...
[0m10:47:19.032272 [debug] [ThreadPool]: SQL status: SUCCESS in 1.0 seconds
[0m10:47:19.036368 [debug] [ThreadPool]: On list_analytics: Close
[0m10:47:19.039577 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_analytics, now list_analytics_loads_stg)
[0m10:47:19.048816 [debug] [ThreadPool]: Using redshift connection "list_analytics_loads_stg"
[0m10:47:19.049187 [debug] [ThreadPool]: On list_analytics_loads_stg: BEGIN
[0m10:47:19.049387 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m10:47:19.049687 [debug] [ThreadPool]: Redshift adapter: Establishing connection using ssl with `sslmode` set to 'prefer'.To connect without ssl, set `sslmode` to 'disable'.
[0m10:47:19.049880 [debug] [ThreadPool]: Redshift adapter: Connecting to redshift with username/password based auth...
[0m10:47:19.794177 [debug] [ThreadPool]: SQL status: SUCCESS in 1.0 seconds
[0m10:47:19.795932 [debug] [ThreadPool]: Using redshift connection "list_analytics_loads_stg"
[0m10:47:19.796868 [debug] [ThreadPool]: On list_analytics_loads_stg: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "list_analytics_loads_stg"} */
select
        table_catalog as database,
        table_name as name,
        table_schema as schema,
        'table' as type
    from information_schema.tables
    where table_schema ilike 'loads_stg'
    and table_type = 'BASE TABLE'
    union all
    select
      table_catalog as database,
      table_name as name,
      table_schema as schema,
      case
        when view_definition ilike '%create materialized view%'
          then 'materialized_view'
        else 'view'
      end as type
    from information_schema.views
    where table_schema ilike 'loads_stg'
[0m10:47:20.031110 [debug] [ThreadPool]: SQL status: SUCCESS in 0.0 seconds
[0m10:47:20.034749 [debug] [ThreadPool]: On list_analytics_loads_stg: ROLLBACK
[0m10:47:20.216488 [debug] [ThreadPool]: On list_analytics_loads_stg: Close
[0m10:47:20.231154 [debug] [MainThread]: Using redshift connection "master"
[0m10:47:20.231967 [debug] [MainThread]: On master: BEGIN
[0m10:47:20.232266 [debug] [MainThread]: Opening a new connection, currently in state init
[0m10:47:20.232748 [debug] [MainThread]: Redshift adapter: Establishing connection using ssl with `sslmode` set to 'prefer'.To connect without ssl, set `sslmode` to 'disable'.
[0m10:47:20.233015 [debug] [MainThread]: Redshift adapter: Connecting to redshift with username/password based auth...
[0m10:47:21.050753 [debug] [MainThread]: SQL status: SUCCESS in 1.0 seconds
[0m10:47:21.051172 [debug] [MainThread]: Using redshift connection "master"
[0m10:47:21.051416 [debug] [MainThread]: On master: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "master"} */
with
    relation as (
        select
            pg_class.oid as relation_id,
            pg_class.relname as relation_name,
            pg_class.relnamespace as schema_id,
            pg_namespace.nspname as schema_name,
            pg_class.relkind as relation_type
        from pg_class
        join pg_namespace
          on pg_class.relnamespace = pg_namespace.oid
        where pg_namespace.nspname != 'information_schema'
          and pg_namespace.nspname not like 'pg\_%'
    ),
    dependency as (
        select distinct
            coalesce(pg_rewrite.ev_class, pg_depend.objid) as dep_relation_id,
            pg_depend.refobjid as ref_relation_id,
            pg_depend.refclassid as ref_class_id
        from pg_depend
        left join pg_rewrite
          on pg_depend.objid = pg_rewrite.oid
        where coalesce(pg_rewrite.ev_class, pg_depend.objid) != pg_depend.refobjid
    )

select distinct
    dep.schema_name as dependent_schema,
    dep.relation_name as dependent_name,
    ref.schema_name as referenced_schema,
    ref.relation_name as referenced_name
from dependency
join relation ref
    on dependency.ref_relation_id = ref.relation_id
join relation dep
    on dependency.dep_relation_id = dep.relation_id
[0m10:47:21.463013 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m10:47:21.467989 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '084b2f70-fff9-4bfc-ac51-b25ce3ab87c5', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x114ccbf50>]}
[0m10:47:21.469045 [debug] [MainThread]: On master: ROLLBACK
[0m10:47:21.690484 [debug] [MainThread]: Using redshift connection "master"
[0m10:47:21.692038 [debug] [MainThread]: On master: BEGIN
[0m10:47:21.790134 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m10:47:21.791642 [debug] [MainThread]: On master: COMMIT
[0m10:47:21.792909 [debug] [MainThread]: Using redshift connection "master"
[0m10:47:21.793386 [debug] [MainThread]: On master: COMMIT
[0m10:47:21.987611 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m10:47:21.989301 [debug] [MainThread]: On master: Close
[0m10:47:21.991627 [info ] [MainThread]: Concurrency: 1 threads (target='dev')
[0m10:47:21.992456 [info ] [MainThread]: 
[0m10:47:21.996588 [debug] [Thread-1 (]: Began running node model.dev.stg___source__source_organization_users
[0m10:47:21.997956 [info ] [Thread-1 (]: 1 of 2 START sql incremental model loads_stg.stg___source__source_organization_users  [RUN]
[0m10:47:21.999540 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly list_analytics_loads_stg, now model.dev.stg___source__source_organization_users)
[0m10:47:22.000329 [debug] [Thread-1 (]: Began compiling node model.dev.stg___source__source_organization_users
[0m10:47:22.032810 [debug] [Thread-1 (]: Writing injected SQL for node "model.dev.stg___source__source_organization_users"
[0m10:47:22.033965 [debug] [Thread-1 (]: Timing info for model.dev.stg___source__source_organization_users (compile): 10:47:22.000715 => 10:47:22.033771
[0m10:47:22.034234 [debug] [Thread-1 (]: Began executing node model.dev.stg___source__source_organization_users
[0m10:47:22.066089 [debug] [Thread-1 (]: Writing runtime sql for node "model.dev.stg___source__source_organization_users"
[0m10:47:22.070952 [debug] [Thread-1 (]: Using redshift connection "model.dev.stg___source__source_organization_users"
[0m10:47:22.071171 [debug] [Thread-1 (]: On model.dev.stg___source__source_organization_users: BEGIN
[0m10:47:22.071329 [debug] [Thread-1 (]: Opening a new connection, currently in state closed
[0m10:47:22.071652 [debug] [Thread-1 (]: Redshift adapter: Establishing connection using ssl with `sslmode` set to 'prefer'.To connect without ssl, set `sslmode` to 'disable'.
[0m10:47:22.071830 [debug] [Thread-1 (]: Redshift adapter: Connecting to redshift with username/password based auth...
[0m10:47:22.881318 [debug] [Thread-1 (]: SQL status: SUCCESS in 1.0 seconds
[0m10:47:22.883008 [debug] [Thread-1 (]: Using redshift connection "model.dev.stg___source__source_organization_users"
[0m10:47:22.884436 [debug] [Thread-1 (]: On model.dev.stg___source__source_organization_users: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "node_id": "model.dev.stg___source__source_organization_users"} */

      
  
    

  create  table
    "analytics"."loads_stg"."stg___source__source_organization_users"
    
    
    
  as (
    /*
BEGIN OF reconfigured.io
DO NOT EDIT this section
RCSRC(2a349b43d0a9efe7dbc1fee97dd47f04)
*/


-- Loading incremental helpers for stg___source__source_organization_users
-- End of incremental helpers
WITH
  base AS (
    WITH ___pre AS (
      SELECT
        -- Column: ___hash
        SHA2('_id' || '|' || CAST(rc1m99m23._id AS TEXT)|| '||' || 'updatedat' || '|' || CAST(rc1m99m23.updatedat AS TEXT)|| '||' || 'terms' || '|' || CAST(rc1m99m23.terms AS TEXT)|| '||' || '__hevo__ingested_at' || '|' || CAST(rc1m99m23.__hevo__ingested_at AS TEXT)|| '||' || 'deletedat' || '|' || CAST(rc1m99m23.deletedat AS TEXT)|| '||' || '__hevo__database_name' || '|' || CAST(rc1m99m23.__hevo__database_name AS TEXT)|| '||' || 'userid' || '|' || CAST(rc1m99m23.userid AS TEXT)|| '||' || '__hevo_id' || '|' || CAST(rc1m99m23.__hevo_id AS TEXT)|| '||' || '__hevo__source_modified_at' || '|' || CAST(rc1m99m23.__hevo__source_modified_at AS TEXT)|| '||' || '__v' || '|' || CAST(rc1m99m23.__v AS TEXT)|| '||' || '__hevo__marked_deleted' || '|' || CAST(rc1m99m23.__hevo__marked_deleted AS TEXT)|| '||' || 'organizationid' || '|' || CAST(rc1m99m23.organizationid AS TEXT)|| '||' || 'createdat' || '|' || CAST(rc1m99m23.createdat AS TEXT)|| '||' || '__hevo__loaded_at' || '|' || CAST(rc1m99m23.__hevo__loaded_at AS TEXT), 256)
 AS "___hash",
        -- Column: ___as_of
        CAST(rc1m99m23.createdat AS timestamp) AS "___as_of",
        -- Column: ___loaded_at
        CAST(CAST('2023-12-18T10:47:17.756177+00:00' AS timestamp) AS timestamp) AS "___loaded_at",
        -- Column: ___source_loaded_at
        CAST(CAST('2023-12-18T10:47:17.756177+00:00' AS timestamp) AS timestamp) AS "___source_loaded_at",
        -- Column: ___is_deleted
        FALSE AS "___is_deleted",
        -- Column: ___source_id
        CAST(rc1m99m23._id AS TEXT) AS "___source_id",
        -- Column: _id
        rc1m99m23._id AS "_id",
        -- Column: updatedat
        rc1m99m23.updatedat AS "updatedat",
        -- Column: terms
        rc1m99m23.terms AS "terms",
        -- Column: __hevo__ingested_at
        rc1m99m23.__hevo__ingested_at AS "__hevo__ingested_at",
        -- Column: deletedat
        rc1m99m23.deletedat AS "deletedat",
        -- Column: __hevo__database_name
        rc1m99m23.__hevo__database_name AS "__hevo__database_name",
        -- Column: userid
        rc1m99m23.userid AS "userid",
        -- Column: __hevo_id
        rc1m99m23.__hevo_id AS "__hevo_id",
        -- Column: __hevo__source_modified_at
        rc1m99m23.__hevo__source_modified_at AS "__hevo__source_modified_at",
        -- Column: __v
        rc1m99m23.__v AS "__v",
        -- Column: __hevo__marked_deleted
        rc1m99m23.__hevo__marked_deleted AS "__hevo__marked_deleted",
        -- Column: organizationid
        rc1m99m23.organizationid AS "organizationid",
        -- Column: createdat
        rc1m99m23.createdat AS "createdat",
        -- Column: __hevo__loaded_at
        rc1m99m23.__hevo__loaded_at AS "__hevo__loaded_at"
      FROM "analytics"."source"."source_organization_users" AS rc1m99m23
      WHERE ( 1 = 1 AND ( CAST('2023-12-18T10:47:17.756177+00:00' AS timestamp) <= CAST('2023-12-18T10:47:17.756177+00:00' AS timestamp) ) )
    )
    ,___rn_added AS (
      SELECT
        "___hash"
        , "___as_of"
        , "___loaded_at"
        , "___source_loaded_at"
        , "___is_deleted"
        , "___source_id"
        , "_id"
        , "updatedat"
        , "terms"
        , "__hevo__ingested_at"
        , "deletedat"
        , "__hevo__database_name"
        , "userid"
        , "__hevo_id"
        , "__hevo__source_modified_at"
        , "__v"
        , "__hevo__marked_deleted"
        , "organizationid"
        , "createdat"
        , "__hevo__loaded_at"
        , ROW_NUMBER() OVER (PARTITION BY "___hash" ORDER BY "___as_of" ASC) AS "___rn"
      FROM ___pre
    )
    SELECT
      "___hash"
      , "___as_of"
      , "___loaded_at"
      , "___source_loaded_at"
      , "___is_deleted"
      , "___source_id"
      , "_id"
      , "updatedat"
      , "terms"
      , "__hevo__ingested_at"
      , "deletedat"
      , "__hevo__database_name"
      , "userid"
      , "__hevo_id"
      , "__hevo__source_modified_at"
      , "__v"
      , "__hevo__marked_deleted"
      , "organizationid"
      , "createdat"
      , "__hevo__loaded_at"
    FROM ___rn_added
    WHERE "___rn" = 1
)
/*
feel free to edit what comes after this
END OF reconfigured.io
*/

SELECT *
FROM base
  );
[0m10:47:22.994487 [debug] [Thread-1 (]: Redshift adapter: Redshift error: cannot cast type boolean to character varying
[0m10:47:22.996334 [debug] [Thread-1 (]: On model.dev.stg___source__source_organization_users: ROLLBACK
[0m10:47:23.192161 [debug] [Thread-1 (]: Timing info for model.dev.stg___source__source_organization_users (execute): 10:47:22.034366 => 10:47:23.191009
[0m10:47:23.193501 [debug] [Thread-1 (]: On model.dev.stg___source__source_organization_users: Close
[0m10:47:23.203481 [debug] [Thread-1 (]: Database Error in model stg___source__source_organization_users (models/reconf/stg/src/stg___source__source_organization_users.sql)
  cannot cast type boolean to character varying
  compiled Code at target/run/dev/models/reconf/stg/src/stg___source__source_organization_users.sql
[0m10:47:23.204351 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '084b2f70-fff9-4bfc-ac51-b25ce3ab87c5', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11587b950>]}
[0m10:47:23.205159 [error] [Thread-1 (]: 1 of 2 ERROR creating sql incremental model loads_stg.stg___source__source_organization_users  [[31mERROR[0m in 1.21s]
[0m10:47:23.206049 [debug] [Thread-1 (]: Finished running node model.dev.stg___source__source_organization_users
[0m10:47:23.206674 [debug] [Thread-1 (]: Began running node model.dev.stg___source__source_users
[0m10:47:23.207708 [info ] [Thread-1 (]: 2 of 2 START sql incremental model loads_stg.stg___source__source_users ........ [RUN]
[0m10:47:23.208434 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.dev.stg___source__source_organization_users, now model.dev.stg___source__source_users)
[0m10:47:23.208679 [debug] [Thread-1 (]: Began compiling node model.dev.stg___source__source_users
[0m10:47:23.237498 [debug] [Thread-1 (]: Writing injected SQL for node "model.dev.stg___source__source_users"
[0m10:47:23.238428 [debug] [Thread-1 (]: Timing info for model.dev.stg___source__source_users (compile): 10:47:23.208809 => 10:47:23.238264
[0m10:47:23.238644 [debug] [Thread-1 (]: Began executing node model.dev.stg___source__source_users
[0m10:47:23.242733 [debug] [Thread-1 (]: Writing runtime sql for node "model.dev.stg___source__source_users"
[0m10:47:23.250083 [debug] [Thread-1 (]: Using redshift connection "model.dev.stg___source__source_users"
[0m10:47:23.250428 [debug] [Thread-1 (]: On model.dev.stg___source__source_users: BEGIN
[0m10:47:23.250616 [debug] [Thread-1 (]: Opening a new connection, currently in state closed
[0m10:47:23.250921 [debug] [Thread-1 (]: Redshift adapter: Establishing connection using ssl with `sslmode` set to 'prefer'.To connect without ssl, set `sslmode` to 'disable'.
[0m10:47:23.251104 [debug] [Thread-1 (]: Redshift adapter: Connecting to redshift with username/password based auth...
[0m10:47:23.965475 [debug] [Thread-1 (]: SQL status: SUCCESS in 1.0 seconds
[0m10:47:23.966531 [debug] [Thread-1 (]: Using redshift connection "model.dev.stg___source__source_users"
[0m10:47:23.968534 [debug] [Thread-1 (]: On model.dev.stg___source__source_users: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "node_id": "model.dev.stg___source__source_users"} */

      
  
    

  create  table
    "analytics"."loads_stg"."stg___source__source_users"
    
    
    
  as (
    /*
BEGIN OF reconfigured.io
DO NOT EDIT this section
RCSRC(076b93ed67459ffe7e3c5fc92623463c)
*/


-- Loading incremental helpers for stg___source__source_users
-- End of incremental helpers
WITH
  base AS (
    WITH ___pre AS (
      SELECT
        -- Column: ___hash
        SHA2('unverifiedemail' || '|' || CAST(rcbh3mv.unverifiedemail AS TEXT)|| '||' || 'applicationids' || '|' || CAST(rcbh3mv.applicationids AS TEXT)|| '||' || 'applicatonids' || '|' || CAST(rcbh3mv.applicatonids AS TEXT)|| '||' || 'email' || '|' || CAST(rcbh3mv.email AS TEXT)|| '||' || '__hevo__marked_deleted' || '|' || CAST(rcbh3mv.__hevo__marked_deleted AS TEXT)|| '||' || 'visitedat' || '|' || CAST(rcbh3mv.visitedat AS TEXT)|| '||' || '__hevo__ingested_at' || '|' || CAST(rcbh3mv.__hevo__ingested_at AS TEXT)|| '||' || 'createdat' || '|' || CAST(rcbh3mv.createdat AS TEXT)|| '||' || 'verifiedat' || '|' || CAST(rcbh3mv.verifiedat AS TEXT)|| '||' || 'deleteat' || '|' || CAST(rcbh3mv.deleteat AS TEXT)|| '||' || 'name' || '|' || CAST(rcbh3mv.name AS TEXT)|| '||' || 'externalid' || '|' || CAST(rcbh3mv.externalid AS TEXT)|| '||' || 'wallets' || '|' || CAST(rcbh3mv.wallets AS TEXT)|| '||' || 'campaigns' || '|' || CAST(rcbh3mv.campaigns AS TEXT)|| '||' || '__hevo__database_name' || '|' || CAST(rcbh3mv.__hevo__database_name AS TEXT)|| '||' || '__hevo__loaded_at' || '|' || CAST(rcbh3mv.__hevo__loaded_at AS TEXT)|| '||' || '__hevo__source_modified_at' || '|' || CAST(rcbh3mv.__hevo__source_modified_at AS TEXT)|| '||' || 'settings' || '|' || CAST(rcbh3mv.settings AS TEXT)|| '||' || 'updatedat' || '|' || CAST(rcbh3mv.updatedat AS TEXT)|| '||' || 'partners' || '|' || CAST(rcbh3mv.partners AS TEXT)|| '||' || 'assets' || '|' || CAST(rcbh3mv.assets AS TEXT)|| '||' || '__hevo_id' || '|' || CAST(rcbh3mv.__hevo_id AS TEXT)|| '||' || '_id' || '|' || CAST(rcbh3mv._id AS TEXT)|| '||' || '__v' || '|' || CAST(rcbh3mv.__v AS TEXT), 256)
 AS "___hash",
        -- Column: ___as_of
        CAST(rcbh3mv.createdat AS timestamp) AS "___as_of",
        -- Column: ___loaded_at
        CAST(CAST('2023-12-18T10:47:17.756177+00:00' AS timestamp) AS timestamp) AS "___loaded_at",
        -- Column: ___source_loaded_at
        CAST(CAST('2023-12-18T10:47:17.756177+00:00' AS timestamp) AS timestamp) AS "___source_loaded_at",
        -- Column: ___is_deleted
        FALSE AS "___is_deleted",
        -- Column: ___source_id
        CAST(rcbh3mv._id AS TEXT) AS "___source_id",
        -- Column: unverifiedemail
        rcbh3mv.unverifiedemail AS "unverifiedemail",
        -- Column: applicationids
        rcbh3mv.applicationids AS "applicationids",
        -- Column: applicatonids
        rcbh3mv.applicatonids AS "applicatonids",
        -- Column: email
        rcbh3mv.email AS "email",
        -- Column: __hevo__marked_deleted
        rcbh3mv.__hevo__marked_deleted AS "__hevo__marked_deleted",
        -- Column: visitedat
        rcbh3mv.visitedat AS "visitedat",
        -- Column: __hevo__ingested_at
        rcbh3mv.__hevo__ingested_at AS "__hevo__ingested_at",
        -- Column: createdat
        rcbh3mv.createdat AS "createdat",
        -- Column: verifiedat
        rcbh3mv.verifiedat AS "verifiedat",
        -- Column: deleteat
        rcbh3mv.deleteat AS "deleteat",
        -- Column: name
        rcbh3mv.name AS "name",
        -- Column: externalid
        rcbh3mv.externalid AS "externalid",
        -- Column: wallets
        rcbh3mv.wallets AS "wallets",
        -- Column: campaigns
        rcbh3mv.campaigns AS "campaigns",
        -- Column: __hevo__database_name
        rcbh3mv.__hevo__database_name AS "__hevo__database_name",
        -- Column: __hevo__loaded_at
        rcbh3mv.__hevo__loaded_at AS "__hevo__loaded_at",
        -- Column: __hevo__source_modified_at
        rcbh3mv.__hevo__source_modified_at AS "__hevo__source_modified_at",
        -- Column: settings
        rcbh3mv.settings AS "settings",
        -- Column: updatedat
        rcbh3mv.updatedat AS "updatedat",
        -- Column: partners
        rcbh3mv.partners AS "partners",
        -- Column: assets
        rcbh3mv.assets AS "assets",
        -- Column: __hevo_id
        rcbh3mv.__hevo_id AS "__hevo_id",
        -- Column: _id
        rcbh3mv._id AS "_id",
        -- Column: __v
        rcbh3mv.__v AS "__v"
      FROM "analytics"."source"."source_users" AS rcbh3mv
      WHERE ( 1 = 1 AND ( CAST('2023-12-18T10:47:17.756177+00:00' AS timestamp) <= CAST('2023-12-18T10:47:17.756177+00:00' AS timestamp) ) )
    )
    ,___rn_added AS (
      SELECT
        "___hash"
        , "___as_of"
        , "___loaded_at"
        , "___source_loaded_at"
        , "___is_deleted"
        , "___source_id"
        , "unverifiedemail"
        , "applicationids"
        , "applicatonids"
        , "email"
        , "__hevo__marked_deleted"
        , "visitedat"
        , "__hevo__ingested_at"
        , "createdat"
        , "verifiedat"
        , "deleteat"
        , "name"
        , "externalid"
        , "wallets"
        , "campaigns"
        , "__hevo__database_name"
        , "__hevo__loaded_at"
        , "__hevo__source_modified_at"
        , "settings"
        , "updatedat"
        , "partners"
        , "assets"
        , "__hevo_id"
        , "_id"
        , "__v"
        , ROW_NUMBER() OVER (PARTITION BY "___hash" ORDER BY "___as_of" ASC) AS "___rn"
      FROM ___pre
    )
    SELECT
      "___hash"
      , "___as_of"
      , "___loaded_at"
      , "___source_loaded_at"
      , "___is_deleted"
      , "___source_id"
      , "unverifiedemail"
      , "applicationids"
      , "applicatonids"
      , "email"
      , "__hevo__marked_deleted"
      , "visitedat"
      , "__hevo__ingested_at"
      , "createdat"
      , "verifiedat"
      , "deleteat"
      , "name"
      , "externalid"
      , "wallets"
      , "campaigns"
      , "__hevo__database_name"
      , "__hevo__loaded_at"
      , "__hevo__source_modified_at"
      , "settings"
      , "updatedat"
      , "partners"
      , "assets"
      , "__hevo_id"
      , "_id"
      , "__v"
    FROM ___rn_added
    WHERE "___rn" = 1
)
/*
feel free to edit what comes after this
END OF reconfigured.io
*/

SELECT *
FROM base
  );
[0m10:47:24.070688 [debug] [Thread-1 (]: Redshift adapter: Redshift error: cannot cast type boolean to character varying
[0m10:47:24.071636 [debug] [Thread-1 (]: On model.dev.stg___source__source_users: ROLLBACK
[0m10:47:24.244301 [debug] [Thread-1 (]: Timing info for model.dev.stg___source__source_users (execute): 10:47:23.238757 => 10:47:24.243186
[0m10:47:24.245604 [debug] [Thread-1 (]: On model.dev.stg___source__source_users: Close
[0m10:47:24.252231 [debug] [Thread-1 (]: Database Error in model stg___source__source_users (models/reconf/stg/src/stg___source__source_users.sql)
  cannot cast type boolean to character varying
  compiled Code at target/run/dev/models/reconf/stg/src/stg___source__source_users.sql
[0m10:47:24.253098 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '084b2f70-fff9-4bfc-ac51-b25ce3ab87c5', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11594ef90>]}
[0m10:47:24.253826 [error] [Thread-1 (]: 2 of 2 ERROR creating sql incremental model loads_stg.stg___source__source_users  [[31mERROR[0m in 1.04s]
[0m10:47:24.254502 [debug] [Thread-1 (]: Finished running node model.dev.stg___source__source_users
[0m10:47:24.256792 [debug] [MainThread]: Using redshift connection "master"
[0m10:47:24.257625 [debug] [MainThread]: On master: BEGIN
[0m10:47:24.258108 [debug] [MainThread]: Opening a new connection, currently in state closed
[0m10:47:24.258619 [debug] [MainThread]: Redshift adapter: Establishing connection using ssl with `sslmode` set to 'prefer'.To connect without ssl, set `sslmode` to 'disable'.
[0m10:47:24.258896 [debug] [MainThread]: Redshift adapter: Connecting to redshift with username/password based auth...
[0m10:47:25.065260 [debug] [MainThread]: SQL status: SUCCESS in 1.0 seconds
[0m10:47:25.067113 [debug] [MainThread]: On master: COMMIT
[0m10:47:25.068395 [debug] [MainThread]: Using redshift connection "master"
[0m10:47:25.068892 [debug] [MainThread]: On master: COMMIT
[0m10:47:25.262410 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m10:47:25.263977 [debug] [MainThread]: On master: Close
[0m10:47:25.266181 [debug] [MainThread]: Connection 'master' was properly closed.
[0m10:47:25.266791 [debug] [MainThread]: Connection 'model.dev.stg___source__source_users' was properly closed.
[0m10:47:25.267397 [info ] [MainThread]: 
[0m10:47:25.268002 [info ] [MainThread]: Finished running 2 incremental models in 0 hours 0 minutes and 7.06 seconds (7.06s).
[0m10:47:25.269193 [debug] [MainThread]: Command end result
[0m10:47:25.285518 [info ] [MainThread]: 
[0m10:47:25.285907 [info ] [MainThread]: [31mCompleted with 2 errors and 0 warnings:[0m
[0m10:47:25.286068 [info ] [MainThread]: 
[0m10:47:25.286219 [error] [MainThread]:   Database Error in model stg___source__source_organization_users (models/reconf/stg/src/stg___source__source_organization_users.sql)
  cannot cast type boolean to character varying
  compiled Code at target/run/dev/models/reconf/stg/src/stg___source__source_organization_users.sql
[0m10:47:25.286361 [info ] [MainThread]: 
[0m10:47:25.286543 [error] [MainThread]:   Database Error in model stg___source__source_users (models/reconf/stg/src/stg___source__source_users.sql)
  cannot cast type boolean to character varying
  compiled Code at target/run/dev/models/reconf/stg/src/stg___source__source_users.sql
[0m10:47:25.286693 [info ] [MainThread]: 
[0m10:47:25.286846 [info ] [MainThread]: Done. PASS=0 WARN=0 ERROR=2 SKIP=0 TOTAL=2
[0m10:47:25.288940 [debug] [MainThread]: Resource report: {"command_name": "run", "command_wall_clock_time": 7.5470824, "process_user_time": 1.557778, "process_kernel_time": 0.202566, "process_mem_max_rss": "150650880", "command_success": false, "process_in_blocks": "0", "process_out_blocks": "0"}
[0m10:47:25.289545 [debug] [MainThread]: Command `dbt run` failed at 10:47:25.289470 after 7.55 seconds
[0m10:47:25.289848 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1043d5d50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11347a090>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1043ebd50>]}
[0m10:47:25.290224 [debug] [MainThread]: Flushing usage events
[0m10:59:42.963579 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10b530bd0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10b566510>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10b51a790>]}


============================== 10:59:42.965883 | bf9f6d78-6969-41d1-9d76-cedc44a57930 ==============================
[0m10:59:42.965883 [info ] [MainThread]: Running with dbt=1.7.4
[0m10:59:42.966181 [debug] [MainThread]: running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'version_check': 'True', 'fail_fast': 'False', 'log_path': '/Users/tom/Documents/ReadyPlayerMe/dbt/dev/logs', 'profiles_dir': '/Users/tom/.dbt', 'debug': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'log_format': 'default', 'introspect': 'True', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'invocation_command': 'dbt run-operation generate_source --args {"schema_name": "sources", "generate_columns": "true", "include_data_types": "true"}', 'target_path': 'None', 'static_parser': 'True', 'send_anonymous_usage_stats': 'True'}
[0m10:59:43.109939 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'bf9f6d78-6969-41d1-9d76-cedc44a57930', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10c589e50>]}
[0m10:59:43.138926 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'bf9f6d78-6969-41d1-9d76-cedc44a57930', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10b595d10>]}
[0m10:59:43.139451 [info ] [MainThread]: Registered adapter: redshift=1.7.1
[0m10:59:43.147051 [debug] [MainThread]: checksum: 248e8aba381ba2d577dce7ab50d2010c2aac45d2b27e6e6214cdd96d2d41fabc, vars: {}, profile: , target: , version: 1.7.4
[0m10:59:43.183073 [debug] [MainThread]: Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.
[0m10:59:43.183253 [debug] [MainThread]: Partial parsing enabled, no changes found, skipping parsing
[0m10:59:43.183512 [warn ] [MainThread]: [[33mWARNING[0m]: Configuration paths exist in your dbt_project.yml file which do not apply to any resources.
There are 1 unused configuration paths:
- models.dev.example
[0m10:59:43.185918 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'bf9f6d78-6969-41d1-9d76-cedc44a57930', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10c576310>]}
[0m10:59:43.191333 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'bf9f6d78-6969-41d1-9d76-cedc44a57930', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10c503a50>]}
[0m10:59:43.191518 [info ] [MainThread]: Found 2 models, 6 tests, 2 sources, 0 exposures, 0 metrics, 662 macros, 0 groups, 0 semantic models
[0m10:59:43.191654 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'bf9f6d78-6969-41d1-9d76-cedc44a57930', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10c52ead0>]}
[0m10:59:43.191965 [debug] [MainThread]: Acquiring new redshift connection 'macro_generate_source'
[0m10:59:43.193725 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m10:59:43.193843 [debug] [MainThread]: On macro_generate_source: BEGIN
[0m10:59:43.193950 [debug] [MainThread]: Opening a new connection, currently in state init
[0m10:59:43.195173 [debug] [MainThread]: Redshift adapter: Establishing connection using ssl with `sslmode` set to 'prefer'.To connect without ssl, set `sslmode` to 'disable'.
[0m10:59:43.195314 [debug] [MainThread]: Redshift adapter: Connecting to redshift with username/password based auth...
[0m10:59:44.080774 [debug] [MainThread]: SQL status: SUCCESS in 1.0 seconds
[0m10:59:44.082423 [debug] [MainThread]: On macro_generate_source: COMMIT
[0m10:59:44.083889 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m10:59:44.084698 [debug] [MainThread]: On macro_generate_source: COMMIT
[0m10:59:44.280959 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m10:59:44.351400 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m10:59:44.351672 [debug] [MainThread]: On macro_generate_source: BEGIN
[0m10:59:44.448896 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m10:59:44.449258 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m10:59:44.449514 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */


      

        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case table_type
                when 'BASE TABLE' then 'table'
                when 'FOREIGN' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(table_type)
            end as "table_type"

        from analytics.information_schema.tables
        where table_schema ilike 'sources'
        and table_name ilike '%'
        and table_name not ilike ''
[0m10:59:44.661010 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m10:59:44.666404 [debug] [MainThread]: On macro_generate_source: ROLLBACK
[0m10:59:44.864977 [debug] [MainThread]: On macro_generate_source: Close
[0m10:59:44.872426 [debug] [MainThread]: Resource report: {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 1.9308846, "process_user_time": 0.956082, "process_kernel_time": 0.143705, "process_mem_max_rss": "131350528", "process_in_blocks": "0", "process_out_blocks": "0"}
[0m10:59:44.873436 [debug] [MainThread]: Command `dbt run-operation` succeeded at 10:59:44.873254 after 1.93 seconds
[0m10:59:44.873974 [debug] [MainThread]: Connection 'macro_generate_source' was properly closed.
[0m10:59:44.874603 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x104ac9e50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x104c0d590>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x104ab2150>]}
[0m10:59:44.875350 [debug] [MainThread]: Flushing usage events
[0m11:00:20.414435 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10958cfd0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10958d350>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x109609f90>]}


============================== 11:00:20.416175 | 9feb8273-62c9-4e86-b0e0-807d780d180f ==============================
[0m11:00:20.416175 [info ] [MainThread]: Running with dbt=1.7.4
[0m11:00:20.416431 [debug] [MainThread]: running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'fail_fast': 'False', 'version_check': 'True', 'log_path': '/Users/tom/Documents/ReadyPlayerMe/dbt/dev/logs', 'debug': 'False', 'profiles_dir': '/Users/tom/.dbt', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'invocation_command': 'dbt run-operation generate_source --args {"schema_name": "sources", "generate_columns": "true", "include_data_types": "true"}', 'log_format': 'default', 'static_parser': 'True', 'target_path': 'None', 'introspect': 'True', 'send_anonymous_usage_stats': 'True'}
[0m11:00:20.515700 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '9feb8273-62c9-4e86-b0e0-807d780d180f', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1095eaf10>]}
[0m11:00:20.544064 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '9feb8273-62c9-4e86-b0e0-807d780d180f', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x108f11390>]}
[0m11:00:20.544402 [info ] [MainThread]: Registered adapter: redshift=1.7.1
[0m11:00:20.551175 [debug] [MainThread]: checksum: 248e8aba381ba2d577dce7ab50d2010c2aac45d2b27e6e6214cdd96d2d41fabc, vars: {}, profile: , target: , version: 1.7.4
[0m11:00:20.568316 [debug] [MainThread]: Partial parsing enabled: 5 files deleted, 0 files added, 0 files changed.
[0m11:00:20.568632 [debug] [MainThread]: Partial parsing: deleted file: dev://macros/reconf/dbt_reconf.sql
[0m11:00:20.568759 [debug] [MainThread]: Partial parsing: deleted file: dev://models/reconf/stg/src/stg___source__source_users.sql
[0m11:00:20.568870 [debug] [MainThread]: Partial parsing: deleted file: dev://models/reconf/stg/src/stg___source__source_organization_users.sql
[0m11:00:20.571044 [warn ] [MainThread]: [[33mWARNING[0m]: Configuration paths exist in your dbt_project.yml file which do not apply to any resources.
There are 1 unused configuration paths:
- models.dev.example
[0m11:00:20.573211 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '9feb8273-62c9-4e86-b0e0-807d780d180f', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10a087810>]}
[0m11:00:20.597874 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '9feb8273-62c9-4e86-b0e0-807d780d180f', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10a0118d0>]}
[0m11:00:20.598084 [info ] [MainThread]: Found 2 sources, 0 exposures, 0 metrics, 591 macros, 0 groups, 0 semantic models
[0m11:00:20.598219 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '9feb8273-62c9-4e86-b0e0-807d780d180f', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10a07a350>]}
[0m11:00:20.598527 [debug] [MainThread]: Acquiring new redshift connection 'macro_generate_source'
[0m11:00:20.600276 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:00:20.600394 [debug] [MainThread]: On macro_generate_source: BEGIN
[0m11:00:20.600501 [debug] [MainThread]: Opening a new connection, currently in state init
[0m11:00:20.601753 [debug] [MainThread]: Redshift adapter: Establishing connection using ssl with `sslmode` set to 'prefer'.To connect without ssl, set `sslmode` to 'disable'.
[0m11:00:20.601879 [debug] [MainThread]: Redshift adapter: Connecting to redshift with username/password based auth...
[0m11:00:21.446940 [debug] [MainThread]: SQL status: SUCCESS in 1.0 seconds
[0m11:00:21.448842 [debug] [MainThread]: On macro_generate_source: COMMIT
[0m11:00:21.450137 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:00:21.450799 [debug] [MainThread]: On macro_generate_source: COMMIT
[0m11:00:21.646963 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:00:21.685213 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:00:21.685523 [debug] [MainThread]: On macro_generate_source: BEGIN
[0m11:00:21.783528 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:00:21.784499 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:00:21.785242 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */


      

        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case table_type
                when 'BASE TABLE' then 'table'
                when 'FOREIGN' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(table_type)
            end as "table_type"

        from analytics.information_schema.tables
        where table_schema ilike 'sources'
        and table_name ilike '%'
        and table_name not ilike ''
[0m11:00:21.996034 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:00:22.001002 [debug] [MainThread]: On macro_generate_source: ROLLBACK
[0m11:00:22.209101 [debug] [MainThread]: On macro_generate_source: Close
[0m11:00:22.218819 [debug] [MainThread]: Resource report: {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 1.8233612, "process_user_time": 0.935234, "process_kernel_time": 0.113643, "process_mem_max_rss": "128942080", "process_in_blocks": "0", "process_out_blocks": "0"}
[0m11:00:22.220087 [debug] [MainThread]: Command `dbt run-operation` succeeded at 11:00:22.219874 after 1.82 seconds
[0m11:00:22.220663 [debug] [MainThread]: Connection 'macro_generate_source' was properly closed.
[0m11:00:22.221214 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10960a250>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10a0122d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x104a76150>]}
[0m11:00:22.221831 [debug] [MainThread]: Flushing usage events
[0m11:00:41.477829 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1066313d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1066301d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1037eec10>]}


============================== 11:00:41.479533 | 51ee29b8-2bfa-48f2-8c15-faea765bf5e8 ==============================
[0m11:00:41.479533 [info ] [MainThread]: Running with dbt=1.7.4
[0m11:00:41.479801 [debug] [MainThread]: running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/Users/tom/.dbt', 'debug': 'False', 'version_check': 'True', 'log_path': '/Users/tom/Documents/ReadyPlayerMe/dbt/dev/logs', 'fail_fast': 'False', 'warn_error': 'None', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'invocation_command': 'dbt run-operation generate_source --args {"schema_name": "sources", "generate_columns": "true", "include_data_types": "true"}', 'introspect': 'True', 'log_format': 'default', 'target_path': 'None', 'static_parser': 'True', 'send_anonymous_usage_stats': 'True'}
[0m11:00:41.581235 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '51ee29b8-2bfa-48f2-8c15-faea765bf5e8', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10667ea50>]}
[0m11:00:41.609542 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '51ee29b8-2bfa-48f2-8c15-faea765bf5e8', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x106695d10>]}
[0m11:00:41.609852 [info ] [MainThread]: Registered adapter: redshift=1.7.1
[0m11:00:41.616601 [debug] [MainThread]: checksum: 248e8aba381ba2d577dce7ab50d2010c2aac45d2b27e6e6214cdd96d2d41fabc, vars: {}, profile: , target: , version: 1.7.4
[0m11:00:41.634360 [debug] [MainThread]: Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.
[0m11:00:41.634575 [debug] [MainThread]: Partial parsing enabled, no changes found, skipping parsing
[0m11:00:41.634760 [warn ] [MainThread]: [[33mWARNING[0m]: Configuration paths exist in your dbt_project.yml file which do not apply to any resources.
There are 1 unused configuration paths:
- models.dev.example
[0m11:00:41.637102 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '51ee29b8-2bfa-48f2-8c15-faea765bf5e8', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x107a2cd90>]}
[0m11:00:41.641425 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '51ee29b8-2bfa-48f2-8c15-faea765bf5e8', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x107829a90>]}
[0m11:00:41.641607 [info ] [MainThread]: Found 2 sources, 0 exposures, 0 metrics, 591 macros, 0 groups, 0 semantic models
[0m11:00:41.641764 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '51ee29b8-2bfa-48f2-8c15-faea765bf5e8', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1078637d0>]}
[0m11:00:41.642090 [debug] [MainThread]: Acquiring new redshift connection 'macro_generate_source'
[0m11:00:41.644027 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:00:41.644187 [debug] [MainThread]: On macro_generate_source: BEGIN
[0m11:00:41.644324 [debug] [MainThread]: Opening a new connection, currently in state init
[0m11:00:41.645770 [debug] [MainThread]: Redshift adapter: Establishing connection using ssl with `sslmode` set to 'prefer'.To connect without ssl, set `sslmode` to 'disable'.
[0m11:00:41.645909 [debug] [MainThread]: Redshift adapter: Connecting to redshift with username/password based auth...
[0m11:00:42.509011 [debug] [MainThread]: SQL status: SUCCESS in 1.0 seconds
[0m11:00:42.509628 [debug] [MainThread]: On macro_generate_source: COMMIT
[0m11:00:42.510078 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:00:42.510368 [debug] [MainThread]: On macro_generate_source: COMMIT
[0m11:00:42.703418 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:00:42.737968 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:00:42.738271 [debug] [MainThread]: On macro_generate_source: BEGIN
[0m11:00:42.835398 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:00:42.836308 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:00:42.836861 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */


      

        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case table_type
                when 'BASE TABLE' then 'table'
                when 'FOREIGN' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(table_type)
            end as "table_type"

        from analytics.information_schema.tables
        where table_schema ilike 'sources'
        and table_name ilike '%'
        and table_name not ilike ''
[0m11:00:43.044611 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:00:43.045833 [debug] [MainThread]: On macro_generate_source: ROLLBACK
[0m11:00:43.240093 [debug] [MainThread]: On macro_generate_source: Close
[0m11:00:43.247965 [debug] [MainThread]: Resource report: {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 1.7896771, "process_user_time": 0.897679, "process_kernel_time": 0.113384, "process_mem_max_rss": "128860160", "process_in_blocks": "0", "process_out_blocks": "0"}
[0m11:00:43.248952 [debug] [MainThread]: Command `dbt run-operation` succeeded at 11:00:43.248780 after 1.79 seconds
[0m11:00:43.249470 [debug] [MainThread]: Connection 'macro_generate_source' was properly closed.
[0m11:00:43.249963 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10667de10>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x105bf5150>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1006aa150>]}
[0m11:00:43.250580 [debug] [MainThread]: Flushing usage events
[0m11:01:14.734526 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x104c41a50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x104cbdbd0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x104cbe250>]}


============================== 11:01:14.736264 | 2874fc60-a1b4-4e05-9ead-e3d8b2dfd196 ==============================
[0m11:01:14.736264 [info ] [MainThread]: Running with dbt=1.7.4
[0m11:01:14.736510 [debug] [MainThread]: running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'fail_fast': 'False', 'debug': 'False', 'log_path': '/Users/tom/Documents/ReadyPlayerMe/dbt/dev/logs', 'version_check': 'True', 'profiles_dir': '/Users/tom/.dbt', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'log_format': 'default', 'static_parser': 'True', 'invocation_command': 'dbt run-operation generate_source --args {"schema_name": "source", "generate_columns": "true", "include_data_types": "true"}', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'target_path': 'None', 'introspect': 'True', 'send_anonymous_usage_stats': 'True'}
[0m11:01:14.839385 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '2874fc60-a1b4-4e05-9ead-e3d8b2dfd196', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10579c910>]}
[0m11:01:14.869376 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '2874fc60-a1b4-4e05-9ead-e3d8b2dfd196', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x104cc3c50>]}
[0m11:01:14.869733 [info ] [MainThread]: Registered adapter: redshift=1.7.1
[0m11:01:14.876834 [debug] [MainThread]: checksum: 248e8aba381ba2d577dce7ab50d2010c2aac45d2b27e6e6214cdd96d2d41fabc, vars: {}, profile: , target: , version: 1.7.4
[0m11:01:14.894067 [debug] [MainThread]: Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.
[0m11:01:14.894270 [debug] [MainThread]: Partial parsing enabled, no changes found, skipping parsing
[0m11:01:14.894471 [warn ] [MainThread]: [[33mWARNING[0m]: Configuration paths exist in your dbt_project.yml file which do not apply to any resources.
There are 1 unused configuration paths:
- models.dev.example
[0m11:01:14.897046 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '2874fc60-a1b4-4e05-9ead-e3d8b2dfd196', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x105717cd0>]}
[0m11:01:14.901856 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '2874fc60-a1b4-4e05-9ead-e3d8b2dfd196', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x105c20650>]}
[0m11:01:14.902113 [info ] [MainThread]: Found 2 sources, 0 exposures, 0 metrics, 591 macros, 0 groups, 0 semantic models
[0m11:01:14.902297 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '2874fc60-a1b4-4e05-9ead-e3d8b2dfd196', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1057aa950>]}
[0m11:01:14.902661 [debug] [MainThread]: Acquiring new redshift connection 'macro_generate_source'
[0m11:01:14.904659 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:14.904787 [debug] [MainThread]: On macro_generate_source: BEGIN
[0m11:01:14.904900 [debug] [MainThread]: Opening a new connection, currently in state init
[0m11:01:14.906309 [debug] [MainThread]: Redshift adapter: Establishing connection using ssl with `sslmode` set to 'prefer'.To connect without ssl, set `sslmode` to 'disable'.
[0m11:01:14.906450 [debug] [MainThread]: Redshift adapter: Connecting to redshift with username/password based auth...
[0m11:01:15.761713 [debug] [MainThread]: SQL status: SUCCESS in 1.0 seconds
[0m11:01:15.762457 [debug] [MainThread]: On macro_generate_source: COMMIT
[0m11:01:15.765368 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:15.765598 [debug] [MainThread]: On macro_generate_source: COMMIT
[0m11:01:15.960951 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:15.993433 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:15.993890 [debug] [MainThread]: On macro_generate_source: BEGIN
[0m11:01:16.090983 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:16.091397 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:16.091632 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */


      

        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case table_type
                when 'BASE TABLE' then 'table'
                when 'FOREIGN' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(table_type)
            end as "table_type"

        from analytics.information_schema.tables
        where table_schema ilike 'source'
        and table_name ilike '%'
        and table_name not ilike ''
[0m11:01:16.317073 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:16.384596 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:16.385041 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'amplitude_cohort'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'amplitude_cohort'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'amplitude_cohort'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:16.788416 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:16.805317 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:16.805867 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'amplitude_event'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'amplitude_event'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'amplitude_event'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:17.174291 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:17.199985 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:17.200481 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'amplitude_event_category'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'amplitude_event_category'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'amplitude_event_category'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:17.566820 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:17.581222 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:17.581750 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'amplitude_event_type'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'amplitude_event_type'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'amplitude_event_type'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:17.947404 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:17.968405 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:17.968959 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'amplitude_studio_event'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'amplitude_studio_event'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'amplitude_studio_event'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:18.339479 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:18.367556 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:18.368001 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'amplitude_studio_event_type'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'amplitude_studio_event_type'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'amplitude_studio_event_type'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:18.728477 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:18.747004 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:18.747546 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'amplitude_user_cohort'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'amplitude_user_cohort'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'amplitude_user_cohort'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:19.111144 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:19.133622 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:19.134221 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'application_service_v1_application_created'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'application_service_v1_application_created'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'application_service_v1_application_created'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:19.499669 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:19.543464 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:19.543795 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'application_service_v1_application_deleted'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'application_service_v1_application_deleted'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'application_service_v1_application_deleted'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:19.909161 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:19.925919 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:19.926383 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'application_service_v1_application_soft_deleted'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'application_service_v1_application_soft_deleted'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'application_service_v1_application_soft_deleted'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:20.286999 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:20.310424 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:20.310936 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'application_service_v1_application_updated'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'application_service_v1_application_updated'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'application_service_v1_application_updated'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:20.709081 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:20.752215 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:20.752567 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'asset_service_v1_asset_added_to_application'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'asset_service_v1_asset_added_to_application'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'asset_service_v1_asset_added_to_application'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:21.120353 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:21.154570 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:21.154961 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'asset_service_v1_asset_application_deleted'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'asset_service_v1_asset_application_deleted'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'asset_service_v1_asset_application_deleted'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:21.528158 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:21.559585 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:21.559975 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'asset_service_v1_asset_application_updated'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'asset_service_v1_asset_application_updated'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'asset_service_v1_asset_application_updated'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:21.924227 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:21.952867 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:21.953253 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'asset_service_v1_asset_created'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'asset_service_v1_asset_created'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'asset_service_v1_asset_created'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:22.321025 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:22.355952 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:22.356441 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'asset_service_v1_asset_deleted'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'asset_service_v1_asset_deleted'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'asset_service_v1_asset_deleted'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:22.769821 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:22.794769 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:22.795385 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'asset_service_v1_asset_removed_from_application'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'asset_service_v1_asset_removed_from_application'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'asset_service_v1_asset_removed_from_application'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:23.163030 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:23.193745 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:23.194147 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'asset_service_v1_asset_updated'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'asset_service_v1_asset_updated'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'asset_service_v1_asset_updated'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:23.560060 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:23.595360 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:23.595752 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'auth_service_v1_api_key_created'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'auth_service_v1_api_key_created'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'auth_service_v1_api_key_created'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:23.953759 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:23.976149 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:23.976656 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'auth_service_v1_api_key_deleted'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'auth_service_v1_api_key_deleted'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'auth_service_v1_api_key_deleted'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:24.338997 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:24.362890 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:24.363407 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'auth_service_v1_api_key_exchanged'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'auth_service_v1_api_key_exchanged'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'auth_service_v1_api_key_exchanged'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:24.726660 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:24.744624 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:24.745201 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'auth_service_v1_api_key_updated'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'auth_service_v1_api_key_updated'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'auth_service_v1_api_key_updated'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:25.106578 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:25.131516 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:25.132016 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'auth_service_v1_organization_created'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'auth_service_v1_organization_created'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'auth_service_v1_organization_created'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:25.493065 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:25.521669 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:25.522115 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'auth_service_v1_organization_deleted'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'auth_service_v1_organization_deleted'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'auth_service_v1_organization_deleted'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:25.882170 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:25.903393 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:25.903935 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'auth_service_v1_organization_soft_deleted'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'auth_service_v1_organization_soft_deleted'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'auth_service_v1_organization_soft_deleted'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:26.263313 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:26.285327 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:26.285817 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'auth_service_v1_user_created'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'auth_service_v1_user_created'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'auth_service_v1_user_created'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:26.648660 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:26.676288 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:26.676773 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'campaign_service_v1_campaign_created'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'campaign_service_v1_campaign_created'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'campaign_service_v1_campaign_created'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:27.052598 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:27.077123 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:27.077615 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'campaign_service_v1_campaign_updated'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'campaign_service_v1_campaign_updated'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'campaign_service_v1_campaign_updated'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:27.473050 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:27.495272 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:27.495694 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'copilot'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'copilot'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'copilot'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:27.875769 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:27.894118 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:27.894522 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'customers'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'customers'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'customers'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:28.301466 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:28.320361 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:28.320856 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'datocms_asset_v1_created'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'datocms_asset_v1_created'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'datocms_asset_v1_created'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:28.717880 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:28.739337 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:28.739856 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'datocms_asset_v1_deleted'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'datocms_asset_v1_deleted'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'datocms_asset_v1_deleted'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:29.102364 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:29.125407 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:29.125915 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'datocms_asset_v1_published'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'datocms_asset_v1_published'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'datocms_asset_v1_published'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:29.487354 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:29.512789 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:29.513275 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'datocms_asset_v1_unpublished'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'datocms_asset_v1_unpublished'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'datocms_asset_v1_unpublished'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:29.874603 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:29.898624 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:29.899152 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'datocms_asset_v1_updated'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'datocms_asset_v1_updated'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'datocms_asset_v1_updated'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:30.260130 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:30.282045 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:30.282459 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'datocms_assets'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'datocms_assets'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'datocms_assets'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:30.648113 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:30.671398 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:30.671837 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'datocms_campaign_v1_created'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'datocms_campaign_v1_created'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'datocms_campaign_v1_created'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:31.035673 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:31.058577 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:31.059090 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'datocms_campaign_v1_deleted'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'datocms_campaign_v1_deleted'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'datocms_campaign_v1_deleted'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:31.419608 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:31.443425 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:31.443926 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'datocms_campaign_v1_updated'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'datocms_campaign_v1_updated'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'datocms_campaign_v1_updated'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:31.803844 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:31.823732 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:31.824185 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'datocms_hair_color_model_v1_created'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'datocms_hair_color_model_v1_created'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'datocms_hair_color_model_v1_created'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:32.190777 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:32.213089 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:32.213590 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'datocms_hair_color_model_v1_deleted'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'datocms_hair_color_model_v1_deleted'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'datocms_hair_color_model_v1_deleted'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:32.592661 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:32.612162 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:32.612552 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'datocms_hair_color_model_v1_updated'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'datocms_hair_color_model_v1_updated'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'datocms_hair_color_model_v1_updated'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:32.976444 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:33.000568 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:33.001069 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'datocms_partner_category_v1_created'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'datocms_partner_category_v1_created'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'datocms_partner_category_v1_created'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:33.371759 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:33.393226 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:33.393659 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'datocms_partner_category_v1_deleted'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'datocms_partner_category_v1_deleted'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'datocms_partner_category_v1_deleted'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:33.758855 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:33.777911 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:33.778333 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'datocms_partner_category_v1_updated'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'datocms_partner_category_v1_updated'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'datocms_partner_category_v1_updated'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:34.139084 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:34.160466 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:34.160967 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'datocms_partner_v1_created'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'datocms_partner_v1_created'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'datocms_partner_v1_created'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:34.518864 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:34.538855 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:34.539275 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'datocms_partner_v1_deleted'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'datocms_partner_v1_deleted'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'datocms_partner_v1_deleted'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:34.903604 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:34.923492 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:34.923917 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'datocms_partner_v1_updated'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'datocms_partner_v1_updated'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'datocms_partner_v1_updated'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:35.282663 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:35.302861 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:35.303352 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'datocms_render_scene_v1_created'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'datocms_render_scene_v1_created'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'datocms_render_scene_v1_created'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:35.664395 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:35.682711 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:35.683131 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'datocms_render_scene_v1_deleted'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'datocms_render_scene_v1_deleted'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'datocms_render_scene_v1_deleted'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:36.041003 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:36.061246 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:36.061678 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'datocms_render_scene_v1_updated'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'datocms_render_scene_v1_updated'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'datocms_render_scene_v1_updated'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:36.433386 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:36.453600 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:36.454071 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'datocms_skin_tone_model_v1_created'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'datocms_skin_tone_model_v1_created'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'datocms_skin_tone_model_v1_created'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:36.818791 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:36.842321 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:36.842838 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'datocms_skin_tone_model_v1_deleted'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'datocms_skin_tone_model_v1_deleted'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'datocms_skin_tone_model_v1_deleted'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:37.203065 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:37.223762 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:37.224180 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'datocms_skin_tone_model_v1_updated'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'datocms_skin_tone_model_v1_updated'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'datocms_skin_tone_model_v1_updated'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:37.581556 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:37.605355 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:37.605900 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'datocms_style_v1_created'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'datocms_style_v1_created'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'datocms_style_v1_created'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:37.967821 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:37.986535 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:37.986975 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'datocms_style_v1_deleted'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'datocms_style_v1_deleted'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'datocms_style_v1_deleted'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:38.346357 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:38.371951 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:38.372454 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'datocms_style_v1_updated'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'datocms_style_v1_updated'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'datocms_style_v1_updated'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:38.734288 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:38.804447 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:38.804766 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'dbt_seeds_applications'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'dbt_seeds_applications'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'dbt_seeds_applications'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:39.180365 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:39.199979 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:39.200577 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'dbt_seeds_applications_new'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'dbt_seeds_applications_new'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'dbt_seeds_applications_new'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:39.565039 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:39.588119 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:39.588703 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'dbt_seeds_datocms_partners'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'dbt_seeds_datocms_partners'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'dbt_seeds_datocms_partners'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:39.958882 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:39.978512 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:39.979048 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'dbt_seeds_organizations'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'dbt_seeds_organizations'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'dbt_seeds_organizations'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:40.340943 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:40.361206 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:40.361708 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'discounted_orders'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'discounted_orders'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'discounted_orders'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:40.728265 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:40.749333 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:40.749853 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'domain_events_max_service_resource_created'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'domain_events_max_service_resource_created'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'domain_events_max_service_resource_created'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:41.114062 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:41.134804 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:41.135312 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'domain_events_max_test'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'domain_events_max_test'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'domain_events_max_test'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:41.499933 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:41.517128 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:41.517567 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'domain_events_max_test_event'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'domain_events_max_test_event'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'domain_events_max_test_event'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:41.882064 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:41.903497 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:41.904160 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'globepay_acceptance_rate_new'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'globepay_acceptance_rate_new'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'globepay_acceptance_rate_new'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:42.265131 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:42.287427 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:42.287894 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'hubspot_calendar_events'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'hubspot_calendar_events'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'hubspot_calendar_events'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:42.655695 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:42.678800 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:42.679242 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'hubspot_companies'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'hubspot_companies'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'hubspot_companies'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:43.053254 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:43.107666 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:43.107949 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'hubspot_company_contact_association'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'hubspot_company_contact_association'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'hubspot_company_contact_association'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:43.466859 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:43.484665 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:43.485236 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'hubspot_company_contacts'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'hubspot_company_contacts'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'hubspot_company_contacts'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:43.847385 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:43.871464 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:43.871905 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'hubspot_company_deal_association'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'hubspot_company_deal_association'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'hubspot_company_deal_association'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:44.267332 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:44.287459 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:44.287966 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'hubspot_company_engagement_association'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'hubspot_company_engagement_association'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'hubspot_company_engagement_association'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:44.649935 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:44.670768 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:44.671283 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'hubspot_contact_company_association'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'hubspot_contact_company_association'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'hubspot_contact_company_association'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:45.035162 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:45.057900 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:45.058438 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'hubspot_contact_deal_association'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'hubspot_contact_deal_association'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'hubspot_contact_deal_association'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:45.420867 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:45.440134 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:45.440746 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'hubspot_contact_engagement_association'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'hubspot_contact_engagement_association'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'hubspot_contact_engagement_association'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:45.818643 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:45.840571 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:45.841156 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'hubspot_contact_form_submission'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'hubspot_contact_form_submission'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'hubspot_contact_form_submission'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:46.204013 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:46.223570 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:46.224044 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'hubspot_contact_lists'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'hubspot_contact_lists'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'hubspot_contact_lists'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:46.585913 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:46.606287 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:46.606721 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'hubspot_contacts'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'hubspot_contacts'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'hubspot_contacts'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:46.988890 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:47.078598 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:47.078825 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'hubspot_deal_company_association'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'hubspot_deal_company_association'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'hubspot_deal_company_association'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:47.437502 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:47.455928 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:47.456432 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'hubspot_deal_contact_association'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'hubspot_deal_contact_association'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'hubspot_deal_contact_association'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:47.818022 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:47.839056 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:47.839687 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'hubspot_deal_engagement_association'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'hubspot_deal_engagement_association'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'hubspot_deal_engagement_association'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:48.204690 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:48.221288 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:48.221731 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'hubspot_deal_ticket_association'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'hubspot_deal_ticket_association'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'hubspot_deal_ticket_association'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:48.580171 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:48.602613 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:48.603134 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'hubspot_deals'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'hubspot_deals'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'hubspot_deals'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:49.087676 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:49.203834 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:49.204092 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'hubspot_deals_pipeline_stages'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'hubspot_deals_pipeline_stages'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'hubspot_deals_pipeline_stages'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:49.566927 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:49.588163 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:49.588641 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'hubspot_deals_pipelines'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'hubspot_deals_pipelines'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'hubspot_deals_pipelines'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:49.950022 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:49.973315 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:49.973940 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'hubspot_email_campaigns'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'hubspot_email_campaigns'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'hubspot_email_campaigns'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:50.335733 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:50.356947 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:50.357469 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'hubspot_email_events'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'hubspot_email_events'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'hubspot_email_events'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:50.720536 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:50.753570 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:50.753939 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'hubspot_email_subscriptions'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'hubspot_email_subscriptions'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'hubspot_email_subscriptions'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:51.116387 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:51.138427 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:51.138933 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'hubspot_engagement_call'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'hubspot_engagement_call'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'hubspot_engagement_call'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:51.500748 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:51.527954 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:51.528589 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'hubspot_engagement_email'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'hubspot_engagement_email'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'hubspot_engagement_email'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:51.891243 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:51.918022 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:51.918410 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'hubspot_engagement_forwarded_email'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'hubspot_engagement_forwarded_email'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'hubspot_engagement_forwarded_email'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:52.280428 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:52.294033 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:52.294463 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'hubspot_engagement_incoming_email'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'hubspot_engagement_incoming_email'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'hubspot_engagement_incoming_email'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:52.653079 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:52.680986 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:52.681645 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'hubspot_engagement_meeting'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'hubspot_engagement_meeting'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'hubspot_engagement_meeting'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:53.044253 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:53.070662 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:53.071262 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'hubspot_engagement_note'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'hubspot_engagement_note'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'hubspot_engagement_note'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:53.432007 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:53.460729 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:53.461635 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'hubspot_engagement_publishing_task'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'hubspot_engagement_publishing_task'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'hubspot_engagement_publishing_task'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:53.823048 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:53.847532 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:53.848398 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'hubspot_engagement_task'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'hubspot_engagement_task'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'hubspot_engagement_task'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:54.249870 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:54.277019 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:54.277764 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'hubspot_engagements'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'hubspot_engagements'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'hubspot_engagements'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:54.644541 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:54.674099 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:54.674960 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'hubspot_forms'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'hubspot_forms'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'hubspot_forms'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:55.051105 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:55.080954 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:55.081746 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'hubspot_line_items'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'hubspot_line_items'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'hubspot_line_items'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:55.441545 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:55.471827 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:55.472665 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'hubspot_owners'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'hubspot_owners'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'hubspot_owners'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:55.832370 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:55.855323 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:55.856052 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'hubspot_products'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'hubspot_products'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'hubspot_products'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:56.216424 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:56.238584 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:56.239478 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'hubspot_ticket_company_association'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'hubspot_ticket_company_association'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'hubspot_ticket_company_association'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:56.706894 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:56.727822 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:56.728501 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'hubspot_ticket_contact_association'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'hubspot_ticket_contact_association'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'hubspot_ticket_contact_association'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:57.094800 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:57.114525 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:57.115165 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'hubspot_ticket_deal_association'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'hubspot_ticket_deal_association'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'hubspot_ticket_deal_association'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:57.474277 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:57.501335 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:57.502083 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'hubspot_ticket_engagement_association'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'hubspot_ticket_engagement_association'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'hubspot_ticket_engagement_association'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:57.864806 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:57.890097 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:57.890881 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'hubspot_tickets'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'hubspot_tickets'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'hubspot_tickets'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:58.258349 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:58.317981 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:58.318473 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'hubspot_tickets_pipeline_stages'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'hubspot_tickets_pipeline_stages'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'hubspot_tickets_pipeline_stages'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:58.677745 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:58.710887 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:58.712038 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'hubspot_tickets_pipelines'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'hubspot_tickets_pipelines'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'hubspot_tickets_pipelines'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:59.075002 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:59.103054 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:59.104199 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'marketing_service_v1_hubspot_company_created'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'marketing_service_v1_hubspot_company_created'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'marketing_service_v1_hubspot_company_created'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:59.465359 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:59.494136 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:59.494904 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'max_service_resource_created'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'max_service_resource_created'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'max_service_resource_created'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:01:59.863323 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:01:59.894800 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:01:59.895542 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'orders'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'orders'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'orders'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:02:00.258556 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:02:00.283060 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:02:00.283850 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'roles'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'roles'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'roles'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:02:00.646138 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:02:00.665784 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:02:00.666622 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'rpm_react_v1_user_asset_added'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'rpm_react_v1_user_asset_added'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'rpm_react_v1_user_asset_added'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:02:01.028603 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:02:01.058626 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:02:01.059914 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'rpm_react_v1_user_asset_deleted'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'rpm_react_v1_user_asset_deleted'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'rpm_react_v1_user_asset_deleted'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:02:01.560930 [debug] [MainThread]: SQL status: SUCCESS in 1.0 seconds
[0m11:02:01.593187 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:02:01.594045 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'rpm_react_v1_user_deleted'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'rpm_react_v1_user_deleted'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'rpm_react_v1_user_deleted'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:02:02.254557 [debug] [MainThread]: SQL status: SUCCESS in 1.0 seconds
[0m11:02:02.283889 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:02:02.284190 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'rpm_react_v1_user_updated'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'rpm_react_v1_user_updated'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'rpm_react_v1_user_updated'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:02:02.799211 [debug] [MainThread]: SQL status: SUCCESS in 1.0 seconds
[0m11:02:02.820661 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:02:02.821401 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'rpm_react_v1_user_verified'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'rpm_react_v1_user_verified'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'rpm_react_v1_user_verified'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:02:03.184503 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:02:03.220720 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:02:03.221117 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'source_accounts'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'source_accounts'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'source_accounts'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:02:03.582127 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:02:03.672521 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:02:03.673029 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'source_animation_shapes'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'source_animation_shapes'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'source_animation_shapes'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:02:04.034860 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:02:04.058297 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:02:04.059214 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'source_apikeys'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'source_apikeys'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'source_apikeys'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:02:04.424343 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:02:04.458434 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:02:04.459446 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'source_applications'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'source_applications'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'source_applications'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:02:04.817308 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:02:04.851696 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:02:04.852535 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'source_avatar_presets'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'source_avatar_presets'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'source_avatar_presets'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:02:05.215910 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:02:05.248201 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:02:05.249081 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'source_avatar_templates'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'source_avatar_templates'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'source_avatar_templates'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:02:05.607348 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:02:05.632833 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:02:05.633689 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'source_avatars'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'source_avatars'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'source_avatars'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:02:06.007835 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:02:06.032405 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:02:06.033174 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'source_campaign_codes'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'source_campaign_codes'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'source_campaign_codes'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:02:06.417251 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:02:06.444973 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:02:06.445795 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'source_changelog'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'source_changelog'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'source_changelog'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:02:06.806047 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:02:06.837982 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:02:06.838804 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'source_codes'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'source_codes'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'source_codes'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:02:07.201409 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:02:07.233063 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:02:07.233797 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'source_organization_users'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'source_organization_users'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'source_organization_users'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:02:07.603654 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:02:07.634583 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:02:07.635464 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'source_organizations'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'source_organizations'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'source_organizations'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:02:08.004702 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:02:08.039615 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:02:08.042311 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'source_photobooths'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'source_photobooths'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'source_photobooths'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:02:08.409911 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:02:08.436596 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:02:08.437742 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'source_roles'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'source_roles'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'source_roles'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:02:08.804535 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:02:08.837235 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:02:08.838254 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'source_user_roles'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'source_user_roles'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'source_user_roles'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:02:09.241724 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:02:09.278991 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:02:09.279649 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'source_users'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'source_users'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'source_users'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:02:09.642260 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:02:09.675510 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:02:09.676255 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'source_wallets'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'source_wallets'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'source_wallets'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:02:10.082293 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:02:10.118791 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:02:10.119542 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'studio_ui_v1_add_application_completed'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'studio_ui_v1_add_application_completed'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'studio_ui_v1_add_application_completed'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:02:10.493203 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:02:10.527383 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:02:10.528387 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'studio_ui_v1_getting_started_completed'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'studio_ui_v1_getting_started_completed'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'studio_ui_v1_getting_started_completed'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:02:10.888889 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:02:10.926134 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:02:10.926791 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'temp_organization_historical'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'temp_organization_historical'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'temp_organization_historical'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:02:11.303272 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:02:11.337390 [debug] [MainThread]: Using redshift connection "macro_generate_source"
[0m11:02:11.338320 [debug] [MainThread]: On macro_generate_source: /* {"app": "dbt", "dbt_version": "1.7.4", "profile_name": "dev", "target_name": "dev", "connection_name": "macro_generate_source"} */

      with bound_views as (
        select
          ordinal_position,
          table_schema,
          column_name,
          data_type,
          character_maximum_length,
          numeric_precision,
          numeric_scale

        from information_schema."columns"
        where table_name = 'tommy_hilfiger_campaign_2023'
    ),

    unbound_views as (
      select
        ordinal_position,
        view_schema,
        col_name,
        case
          when col_type ilike 'character varying%' then
            'character varying'
          when col_type ilike 'numeric%' then 'numeric'
          else col_type
        end as col_type,
        case
          when col_type like 'character%'
          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int
          else null
        end as character_maximum_length,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when col_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale

      from pg_get_late_binding_view_cols()
      cols(view_schema name, view_name name, col_name name,
           col_type varchar, ordinal_position int)
      where view_name = 'tommy_hilfiger_campaign_2023'
    ),

    external_views as (
      select
        columnnum,
        schemaname,
        columnname,
        case
          when external_type ilike 'character varying%' or external_type ilike 'varchar%'
          then 'character varying'
          when external_type ilike 'numeric%' then 'numeric'
          else external_type
        end as external_type,
        case
          when external_type like 'character%' or external_type like 'varchar%'
          then nullif(
            REGEXP_SUBSTR(external_type, '[0-9]+'),
            '')::int
          else null
        end as character_maximum_length,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),
            '')::int
          else null
        end as numeric_precision,
        case
          when external_type like 'numeric%'
          then nullif(
            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),
            '')::int
          else null
        end as numeric_scale
      from
        pg_catalog.svv_external_columns
      where
        schemaname = 'source'
        and tablename = 'tommy_hilfiger_campaign_2023'

    ),

    unioned as (
      select * from bound_views
      union all
      select * from unbound_views
      union all
      select * from external_views
    )

    select
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale

    from unioned
    
    where table_schema = 'source'
    
    order by ordinal_position
[0m11:02:11.699569 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m11:02:11.711079 [debug] [MainThread]: On macro_generate_source: ROLLBACK
[0m11:02:11.931832 [debug] [MainThread]: On macro_generate_source: Close
[0m11:02:11.939491 [debug] [MainThread]: Resource report: {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 57.224735, "process_user_time": 5.013582, "process_kernel_time": 0.236412, "process_mem_max_rss": "143278080", "process_in_blocks": "0", "process_out_blocks": "0"}
[0m11:02:11.940733 [debug] [MainThread]: Command `dbt run-operation` succeeded at 11:02:11.940421 after 57.23 seconds
[0m11:02:11.941549 [debug] [MainThread]: Connection 'macro_generate_source' was properly closed.
[0m11:02:11.942715 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x104ca5e10>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x104cbe350>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x112988690>]}
[0m11:02:11.943545 [debug] [MainThread]: Flushing usage events
[0m11:45:16.035157 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1046250d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x104680c50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10466fb10>]}


============================== 11:45:16.037230 | 42f3f8cf-5525-4bb4-b178-d2dcfdeb9f11 ==============================
[0m11:45:16.037230 [info ] [MainThread]: Running with dbt=1.7.5
[0m11:45:16.037502 [debug] [MainThread]: running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'version_check': 'True', 'fail_fast': 'False', 'log_path': '/Users/tom/Documents/ReadyPlayerMe/dbt/dev/logs', 'profiles_dir': '/Users/tom/.dbt', 'debug': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'log_format': 'default', 'invocation_command': 'dbt run', 'static_parser': 'True', 'introspect': 'True', 'target_path': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'send_anonymous_usage_stats': 'True'}
[0m11:45:16.178814 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '42f3f8cf-5525-4bb4-b178-d2dcfdeb9f11', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x104d60990>]}
[0m11:45:16.206436 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '42f3f8cf-5525-4bb4-b178-d2dcfdeb9f11', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x104d07510>]}
[0m11:45:16.206896 [info ] [MainThread]: Registered adapter: redshift=1.7.2
[0m11:45:16.214670 [debug] [MainThread]: checksum: 9e195a7e2498115e3a0071333dd5a6b6a8f8586a16507edd6adb1ded89eccd5a, vars: {}, profile: , target: , version: 1.7.5
[0m11:45:16.220783 [info ] [MainThread]: Unable to do partial parsing because of a version mismatch
[0m11:45:16.221024 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'partial_parser', 'label': '42f3f8cf-5525-4bb4-b178-d2dcfdeb9f11', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10546ee50>]}
[0m11:45:16.704499 [warn ] [MainThread]: [[33mWARNING[0m]: Configuration paths exist in your dbt_project.yml file which do not apply to any resources.
There are 1 unused configuration paths:
- models.dev.example
[0m11:45:16.706604 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '42f3f8cf-5525-4bb4-b178-d2dcfdeb9f11', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1053ccf10>]}
[0m11:45:16.710960 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '42f3f8cf-5525-4bb4-b178-d2dcfdeb9f11', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10551d510>]}
[0m11:45:16.711152 [info ] [MainThread]: Found 2 sources, 0 exposures, 0 metrics, 591 macros, 0 groups, 0 semantic models
[0m11:45:16.711301 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '42f3f8cf-5525-4bb4-b178-d2dcfdeb9f11', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1042c5210>]}
[0m11:45:16.711849 [info ] [MainThread]: 
[0m11:45:16.711984 [warn ] [MainThread]: Nothing to do. Try checking your model configs and model specification args
[0m11:45:16.712178 [debug] [MainThread]: Command end result
[0m11:45:16.716591 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": true, "command_wall_clock_time": 0.70415264, "process_user_time": 1.244858, "process_kernel_time": 0.097317, "process_mem_max_rss": "120242176", "process_in_blocks": "0", "process_out_blocks": "0"}
[0m11:45:16.716821 [debug] [MainThread]: Command `dbt run` succeeded at 11:45:16.716773 after 0.70 seconds
[0m11:45:16.716992 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x104681690>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x103954510>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x105456a10>]}
[0m11:45:16.717147 [debug] [MainThread]: Flushing usage events
[0m12:18:00.126676 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10504f6d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1050d9210>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1050d9dd0>]}


============================== 12:18:00.128855 | ea102c80-087d-44d1-8e0e-2df488826c33 ==============================
[0m12:18:00.128855 [info ] [MainThread]: Running with dbt=1.7.5
[0m12:18:00.129123 [debug] [MainThread]: running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/Users/tom/.dbt', 'version_check': 'True', 'warn_error': 'None', 'log_path': '/Users/tom/Documents/ReadyPlayerMe/dbt/dev/logs', 'debug': 'False', 'fail_fast': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'log_format': 'default', 'introspect': 'True', 'static_parser': 'True', 'invocation_command': 'dbt run', 'target_path': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'send_anonymous_usage_stats': 'True'}
[0m12:18:00.524155 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'ea102c80-087d-44d1-8e0e-2df488826c33', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10576a950>]}
[0m12:18:00.551476 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'ea102c80-087d-44d1-8e0e-2df488826c33', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10576a390>]}
[0m12:18:00.551923 [info ] [MainThread]: Registered adapter: redshift=1.7.2
[0m12:18:00.559352 [debug] [MainThread]: checksum: 9e195a7e2498115e3a0071333dd5a6b6a8f8586a16507edd6adb1ded89eccd5a, vars: {}, profile: , target: , version: 1.7.5
[0m12:18:00.589600 [debug] [MainThread]: Partial parsing enabled: 1 files deleted, 2 files added, 0 files changed.
[0m12:18:00.589866 [debug] [MainThread]: Partial parsing: added file: dev://models/sources/services.yml
[0m12:18:00.590002 [debug] [MainThread]: Partial parsing: added file: dev://models/organisations/staging/organisations_created.sql
[0m12:18:00.628339 [error] [MainThread]: Encountered an error:
Compilation Error in model organisations_created (models/organisations/staging/organisations_created.sql)
  expected token ',', got 'tags'
    line 5
      tags=['auth_service','organization']
[0m12:18:00.646840 [debug] [MainThread]: Resource report: {"command_name": "run", "command_wall_clock_time": 0.5466401, "process_user_time": 0.850076, "process_kernel_time": 0.095454, "process_mem_max_rss": "115884032", "command_success": false, "process_in_blocks": "0", "process_out_blocks": "0"}
[0m12:18:00.647164 [debug] [MainThread]: Command `dbt run` failed at 12:18:00.647108 after 0.55 seconds
[0m12:18:00.647345 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1050db7d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x105dd7390>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x100cb7d50>]}
[0m12:18:00.647508 [debug] [MainThread]: Flushing usage events
[0m12:18:42.324428 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x110f57e50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x110f9cf90>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x110fbdf50>]}


============================== 12:18:42.326637 | 092f297e-e717-4e95-acfe-a505798782ad ==============================
[0m12:18:42.326637 [info ] [MainThread]: Running with dbt=1.7.5
[0m12:18:42.326926 [debug] [MainThread]: running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'fail_fast': 'False', 'debug': 'False', 'log_path': '/Users/tom/Documents/ReadyPlayerMe/dbt/dev/logs', 'profiles_dir': '/Users/tom/.dbt', 'version_check': 'True', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'introspect': 'True', 'invocation_command': 'dbt run', 'static_parser': 'True', 'target_path': 'None', 'log_format': 'default', 'send_anonymous_usage_stats': 'True'}
[0m12:18:42.435071 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '092f297e-e717-4e95-acfe-a505798782ad', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x110930150>]}
[0m12:18:42.462883 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '092f297e-e717-4e95-acfe-a505798782ad', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x111c8bed0>]}
[0m12:18:42.463984 [info ] [MainThread]: Registered adapter: redshift=1.7.2
[0m12:18:42.471908 [debug] [MainThread]: checksum: 9e195a7e2498115e3a0071333dd5a6b6a8f8586a16507edd6adb1ded89eccd5a, vars: {}, profile: , target: , version: 1.7.5
[0m12:18:42.500085 [debug] [MainThread]: Partial parsing enabled: 1 files deleted, 2 files added, 0 files changed.
[0m12:18:42.500396 [debug] [MainThread]: Partial parsing: added file: dev://models/sources/services.yml
[0m12:18:42.500552 [debug] [MainThread]: Partial parsing: added file: dev://models/organisations/staging/organisations_created.sql
[0m12:18:42.572740 [warn ] [MainThread]: [[33mWARNING[0m]: Configuration paths exist in your dbt_project.yml file which do not apply to any resources.
There are 1 unused configuration paths:
- models.dev.example
[0m12:18:42.574791 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '092f297e-e717-4e95-acfe-a505798782ad', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1121d5b50>]}
[0m12:18:42.604688 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '092f297e-e717-4e95-acfe-a505798782ad', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1121a76d0>]}
[0m12:18:42.604918 [info ] [MainThread]: Found 1 model, 9 sources, 0 exposures, 0 metrics, 591 macros, 0 groups, 0 semantic models
[0m12:18:42.605080 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '092f297e-e717-4e95-acfe-a505798782ad', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x105b58e10>]}
[0m12:18:42.605707 [info ] [MainThread]: 
[0m12:18:42.606031 [debug] [MainThread]: Acquiring new redshift connection 'master'
[0m12:18:42.606441 [debug] [ThreadPool]: Acquiring new redshift connection 'list_analytics'
[0m12:18:42.612754 [debug] [ThreadPool]: Using redshift connection "list_analytics"
[0m12:18:42.612941 [debug] [ThreadPool]: On list_analytics: /* {"app": "dbt", "dbt_version": "1.7.5", "profile_name": "dev", "target_name": "dev", "connection_name": "list_analytics"} */

    select distinct nspname from pg_namespace
[0m12:18:42.613058 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m12:18:42.614335 [debug] [ThreadPool]: Redshift adapter: Establishing connection using ssl with `sslmode` set to 'prefer'.To connect without ssl, set `sslmode` to 'disable'.
[0m12:18:42.614464 [debug] [ThreadPool]: Redshift adapter: Connecting to redshift with username/password based auth...
[0m12:18:43.626939 [debug] [ThreadPool]: SQL status: SUCCESS in 1.0 seconds
[0m12:18:43.631606 [debug] [ThreadPool]: On list_analytics: Close
[0m12:18:43.634437 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_analytics, now create_analytics_loads_staging)
[0m12:18:43.635892 [debug] [ThreadPool]: Creating schema "database: "analytics"
schema: "loads_staging"
"
[0m12:18:43.646348 [debug] [ThreadPool]: Using redshift connection "create_analytics_loads_staging"
[0m12:18:43.646928 [debug] [ThreadPool]: On create_analytics_loads_staging: BEGIN
[0m12:18:43.647285 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m12:18:43.647802 [debug] [ThreadPool]: Redshift adapter: Establishing connection using ssl with `sslmode` set to 'prefer'.To connect without ssl, set `sslmode` to 'disable'.
[0m12:18:43.648156 [debug] [ThreadPool]: Redshift adapter: Connecting to redshift with username/password based auth...
[0m12:18:44.444103 [debug] [ThreadPool]: SQL status: SUCCESS in 1.0 seconds
[0m12:18:44.445138 [debug] [ThreadPool]: Using redshift connection "create_analytics_loads_staging"
[0m12:18:44.445688 [debug] [ThreadPool]: On create_analytics_loads_staging: /* {"app": "dbt", "dbt_version": "1.7.5", "profile_name": "dev", "target_name": "dev", "connection_name": "create_analytics_loads_staging"} */
create schema if not exists "loads_staging"
[0m12:18:44.882915 [debug] [ThreadPool]: SQL status: SUCCESS in 0.0 seconds
[0m12:18:44.884515 [debug] [ThreadPool]: On create_analytics_loads_staging: COMMIT
[0m12:18:44.885135 [debug] [ThreadPool]: Using redshift connection "create_analytics_loads_staging"
[0m12:18:44.885498 [debug] [ThreadPool]: On create_analytics_loads_staging: COMMIT
[0m12:18:45.192953 [debug] [ThreadPool]: SQL status: SUCCESS in 0.0 seconds
[0m12:18:45.194938 [debug] [ThreadPool]: On create_analytics_loads_staging: Close
[0m12:18:45.198510 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly create_analytics_loads_staging, now list_analytics_loads_staging)
[0m12:18:45.209618 [debug] [ThreadPool]: Using redshift connection "list_analytics_loads_staging"
[0m12:18:45.210104 [debug] [ThreadPool]: On list_analytics_loads_staging: BEGIN
[0m12:18:45.210401 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m12:18:45.210841 [debug] [ThreadPool]: Redshift adapter: Establishing connection using ssl with `sslmode` set to 'prefer'.To connect without ssl, set `sslmode` to 'disable'.
[0m12:18:45.211140 [debug] [ThreadPool]: Redshift adapter: Connecting to redshift with username/password based auth...
[0m12:18:46.113116 [debug] [ThreadPool]: SQL status: SUCCESS in 1.0 seconds
[0m12:18:46.113678 [debug] [ThreadPool]: Using redshift connection "list_analytics_loads_staging"
[0m12:18:46.114059 [debug] [ThreadPool]: On list_analytics_loads_staging: /* {"app": "dbt", "dbt_version": "1.7.5", "profile_name": "dev", "target_name": "dev", "connection_name": "list_analytics_loads_staging"} */
select
        table_catalog as database,
        table_name as name,
        table_schema as schema,
        'table' as type
    from information_schema.tables
    where table_schema ilike 'loads_staging'
    and table_type = 'BASE TABLE'
    union all
    select
      table_catalog as database,
      table_name as name,
      table_schema as schema,
      case
        when view_definition ilike '%create materialized view%'
          then 'materialized_view'
        else 'view'
      end as type
    from information_schema.views
    where table_schema ilike 'loads_staging'
[0m12:18:46.419660 [debug] [ThreadPool]: SQL status: SUCCESS in 0.0 seconds
[0m12:18:46.422519 [debug] [ThreadPool]: On list_analytics_loads_staging: ROLLBACK
[0m12:18:46.634081 [debug] [ThreadPool]: On list_analytics_loads_staging: Close
[0m12:18:46.649199 [debug] [MainThread]: Using redshift connection "master"
[0m12:18:46.649706 [debug] [MainThread]: On master: BEGIN
[0m12:18:46.650075 [debug] [MainThread]: Opening a new connection, currently in state init
[0m12:18:46.650671 [debug] [MainThread]: Redshift adapter: Establishing connection using ssl with `sslmode` set to 'prefer'.To connect without ssl, set `sslmode` to 'disable'.
[0m12:18:46.651070 [debug] [MainThread]: Redshift adapter: Connecting to redshift with username/password based auth...
[0m12:18:47.545059 [debug] [MainThread]: SQL status: SUCCESS in 1.0 seconds
[0m12:18:47.546775 [debug] [MainThread]: Using redshift connection "master"
[0m12:18:47.547615 [debug] [MainThread]: On master: /* {"app": "dbt", "dbt_version": "1.7.5", "profile_name": "dev", "target_name": "dev", "connection_name": "master"} */
with
    relation as (
        select
            pg_class.oid as relation_id,
            pg_class.relname as relation_name,
            pg_class.relnamespace as schema_id,
            pg_namespace.nspname as schema_name,
            pg_class.relkind as relation_type
        from pg_class
        join pg_namespace
          on pg_class.relnamespace = pg_namespace.oid
        where pg_namespace.nspname != 'information_schema'
          and pg_namespace.nspname not like 'pg\_%'
    ),
    dependency as (
        select distinct
            coalesce(pg_rewrite.ev_class, pg_depend.objid) as dep_relation_id,
            pg_depend.refobjid as ref_relation_id,
            pg_depend.refclassid as ref_class_id
        from pg_depend
        left join pg_rewrite
          on pg_depend.objid = pg_rewrite.oid
        where coalesce(pg_rewrite.ev_class, pg_depend.objid) != pg_depend.refobjid
    )

select distinct
    dep.schema_name as dependent_schema,
    dep.relation_name as dependent_name,
    ref.schema_name as referenced_schema,
    ref.relation_name as referenced_name
from dependency
join relation ref
    on dependency.ref_relation_id = ref.relation_id
join relation dep
    on dependency.dep_relation_id = dep.relation_id
[0m12:18:48.054042 [debug] [MainThread]: SQL status: SUCCESS in 1.0 seconds
[0m12:18:48.064613 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '092f297e-e717-4e95-acfe-a505798782ad', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x111ddcdd0>]}
[0m12:18:48.065379 [debug] [MainThread]: On master: ROLLBACK
[0m12:18:48.270763 [debug] [MainThread]: Using redshift connection "master"
[0m12:18:48.272165 [debug] [MainThread]: On master: BEGIN
[0m12:18:48.366075 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m12:18:48.367164 [debug] [MainThread]: On master: COMMIT
[0m12:18:48.368364 [debug] [MainThread]: Using redshift connection "master"
[0m12:18:48.369302 [debug] [MainThread]: On master: COMMIT
[0m12:18:48.558273 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m12:18:48.559518 [debug] [MainThread]: On master: Close
[0m12:18:48.562198 [info ] [MainThread]: Concurrency: 1 threads (target='dev')
[0m12:18:48.562835 [info ] [MainThread]: 
[0m12:18:48.568169 [debug] [Thread-1 (]: Began running node model.dev.organisations_created
[0m12:18:48.568983 [info ] [Thread-1 (]: 1 of 1 START sql view model loads_staging.organisations_created ................ [RUN]
[0m12:18:48.570012 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly list_analytics_loads_staging, now model.dev.organisations_created)
[0m12:18:48.570517 [debug] [Thread-1 (]: Began compiling node model.dev.organisations_created
[0m12:18:48.576375 [debug] [Thread-1 (]: Writing injected SQL for node "model.dev.organisations_created"
[0m12:18:48.577703 [debug] [Thread-1 (]: Timing info for model.dev.organisations_created (compile): 12:18:48.570881 => 12:18:48.577426
[0m12:18:48.578190 [debug] [Thread-1 (]: Began executing node model.dev.organisations_created
[0m12:18:48.604839 [debug] [Thread-1 (]: Writing runtime sql for node "model.dev.organisations_created"
[0m12:18:48.608606 [debug] [Thread-1 (]: Using redshift connection "model.dev.organisations_created"
[0m12:18:48.608824 [debug] [Thread-1 (]: On model.dev.organisations_created: BEGIN
[0m12:18:48.609015 [debug] [Thread-1 (]: Opening a new connection, currently in state closed
[0m12:18:48.609320 [debug] [Thread-1 (]: Redshift adapter: Establishing connection using ssl with `sslmode` set to 'prefer'.To connect without ssl, set `sslmode` to 'disable'.
[0m12:18:48.609529 [debug] [Thread-1 (]: Redshift adapter: Connecting to redshift with username/password based auth...
[0m12:18:49.490470 [debug] [Thread-1 (]: SQL status: SUCCESS in 1.0 seconds
[0m12:18:49.492150 [debug] [Thread-1 (]: Using redshift connection "model.dev.organisations_created"
[0m12:18:49.493381 [debug] [Thread-1 (]: On model.dev.organisations_created: /* {"app": "dbt", "dbt_version": "1.7.5", "profile_name": "dev", "target_name": "dev", "node_id": "model.dev.organisations_created"} */


  create view "analytics"."loads_staging"."organisations_created__dbt_tmp" as (
    

WITH 
historic AS (
    SELECT *
    FROM source.dbt_seeds_organizations
),
created AS (
    SELECT _id AS organization_id,
           hubspottrackingcode AS hubspot_tracking_code,
           COALESCE(NAME, productname) AS organization_name,
           productname AS product_name,
           employees AS employee_bucket,
           website,
           planstouserpm AS plans_to_use_rpm,
           "references" AS reference,
           createdat AS created_at,
           updatedat AS updated_at,
           ROW_NUMBER() OVER (PARTITION BY hubspot_tracking_code ORDER BY updated_at DESC) AS row_number
    FROM "analytics"."source"."auth_service_v1_organization_created"
),
created_dedup AS (
    SELECT *
    FROM created
    WHERE row_number = 1
),
combined AS (
    SELECT organization_id,
           hubspot_id,
           NULL AS hubspot_tracking_code,
           organization_name,
           product_name,
           employee_bucket,
           website,
           plans_to_use_rpm,
           reference,
           created_at::timestamp,
           updated_at::timestamp
    FROM historic
    UNION ALL
    SELECT organization_id,
           NULL AS hubspot_id,
           hubspot_tracking_code,
           organization_name,
           product_name,
           employee_bucket,
           website,
           plans_to_use_rpm,
           reference,
           created_at,
           updated_at
    FROM created_dedup
),
latest_organization_record AS (
    SELECT *,
           ROW_NUMBER() OVER (PARTITION BY organization_id ORDER BY updated_at DESC) AS row_number
    FROM combined
)
SELECT latest_organization_record.organization_id
     , latest_organization_record.hubspot_id
     , latest_organization_record.hubspot_tracking_code
     , latest_organization_record.organization_name
     , latest_organization_record.product_name
     , latest_organization_record.employee_bucket
     , latest_organization_record.website
     , latest_organization_record.plans_to_use_rpm
     , latest_organization_record.reference
     , latest_organization_record.created_at
     , latest_organization_record.updated_at
FROM latest_organization_record
WHERE row_number = 1
GROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11
  ) ;
[0m12:18:50.003710 [debug] [Thread-1 (]: SQL status: SUCCESS in 1.0 seconds
[0m12:18:50.016460 [debug] [Thread-1 (]: Using redshift connection "model.dev.organisations_created"
[0m12:18:50.017016 [debug] [Thread-1 (]: On model.dev.organisations_created: /* {"app": "dbt", "dbt_version": "1.7.5", "profile_name": "dev", "target_name": "dev", "node_id": "model.dev.organisations_created"} */
alter table "analytics"."loads_staging"."organisations_created__dbt_tmp" rename to "organisations_created"
[0m12:18:50.619913 [debug] [Thread-1 (]: SQL status: SUCCESS in 1.0 seconds
[0m12:18:50.644526 [debug] [Thread-1 (]: On model.dev.organisations_created: COMMIT
[0m12:18:50.645225 [debug] [Thread-1 (]: Using redshift connection "model.dev.organisations_created"
[0m12:18:50.645595 [debug] [Thread-1 (]: On model.dev.organisations_created: COMMIT
[0m12:18:50.943063 [debug] [Thread-1 (]: SQL status: SUCCESS in 0.0 seconds
[0m12:18:50.945775 [debug] [Thread-1 (]: Using redshift connection "model.dev.organisations_created"
[0m12:18:50.946621 [debug] [Thread-1 (]: On model.dev.organisations_created: BEGIN
[0m12:18:51.233188 [debug] [Thread-1 (]: SQL status: SUCCESS in 0.0 seconds
[0m12:18:51.238286 [debug] [Thread-1 (]: Applying DROP to: "analytics"."loads_staging"."organisations_created__dbt_backup"
[0m12:18:51.241517 [debug] [Thread-1 (]: Using redshift connection "model.dev.organisations_created"
[0m12:18:51.241764 [debug] [Thread-1 (]: On model.dev.organisations_created: /* {"app": "dbt", "dbt_version": "1.7.5", "profile_name": "dev", "target_name": "dev", "node_id": "model.dev.organisations_created"} */
drop view if exists "analytics"."loads_staging"."organisations_created__dbt_backup" cascade
[0m12:18:51.438860 [debug] [Thread-1 (]: SQL status: SUCCESS in 0.0 seconds
[0m12:18:51.440789 [debug] [Thread-1 (]: On model.dev.organisations_created: COMMIT
[0m12:18:51.441519 [debug] [Thread-1 (]: Using redshift connection "model.dev.organisations_created"
[0m12:18:51.441986 [debug] [Thread-1 (]: On model.dev.organisations_created: COMMIT
[0m12:18:51.744708 [debug] [Thread-1 (]: SQL status: SUCCESS in 0.0 seconds
[0m12:18:51.746509 [debug] [Thread-1 (]: Using redshift connection "model.dev.organisations_created"
[0m12:18:51.747450 [debug] [Thread-1 (]: On model.dev.organisations_created: BEGIN
[0m12:18:51.862046 [debug] [Thread-1 (]: SQL status: SUCCESS in 0.0 seconds
[0m12:18:51.865596 [debug] [Thread-1 (]: Timing info for model.dev.organisations_created (execute): 12:18:48.578449 => 12:18:51.865090
[0m12:18:51.866233 [debug] [Thread-1 (]: On model.dev.organisations_created: ROLLBACK
[0m12:18:52.058641 [debug] [Thread-1 (]: On model.dev.organisations_created: Close
[0m12:18:52.061649 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '092f297e-e717-4e95-acfe-a505798782ad', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x112363a10>]}
[0m12:18:52.063041 [info ] [Thread-1 (]: 1 of 1 OK created sql view model loads_staging.organisations_created ........... [[32mSUCCESS[0m in 3.49s]
[0m12:18:52.064088 [debug] [Thread-1 (]: Finished running node model.dev.organisations_created
[0m12:18:52.066738 [debug] [MainThread]: Using redshift connection "master"
[0m12:18:52.067258 [debug] [MainThread]: On master: BEGIN
[0m12:18:52.067685 [debug] [MainThread]: Opening a new connection, currently in state closed
[0m12:18:52.068359 [debug] [MainThread]: Redshift adapter: Establishing connection using ssl with `sslmode` set to 'prefer'.To connect without ssl, set `sslmode` to 'disable'.
[0m12:18:52.068805 [debug] [MainThread]: Redshift adapter: Connecting to redshift with username/password based auth...
[0m12:18:52.976397 [debug] [MainThread]: SQL status: SUCCESS in 1.0 seconds
[0m12:18:52.977701 [debug] [MainThread]: On master: COMMIT
[0m12:18:52.978577 [debug] [MainThread]: Using redshift connection "master"
[0m12:18:52.979195 [debug] [MainThread]: On master: COMMIT
[0m12:18:53.177492 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m12:18:53.179153 [debug] [MainThread]: On master: Close
[0m12:18:53.180953 [debug] [MainThread]: Connection 'master' was properly closed.
[0m12:18:53.181403 [debug] [MainThread]: Connection 'model.dev.organisations_created' was properly closed.
[0m12:18:53.181798 [info ] [MainThread]: 
[0m12:18:53.182188 [info ] [MainThread]: Finished running 1 view model in 0 hours 0 minutes and 10.58 seconds (10.58s).
[0m12:18:53.182872 [debug] [MainThread]: Command end result
[0m12:18:53.201619 [info ] [MainThread]: 
[0m12:18:53.202045 [info ] [MainThread]: [32mCompleted successfully[0m
[0m12:18:53.202311 [info ] [MainThread]: 
[0m12:18:53.202570 [info ] [MainThread]: Done. PASS=1 WARN=0 ERROR=0 SKIP=0 TOTAL=1
[0m12:18:53.204557 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": true, "command_wall_clock_time": 10.901458, "process_user_time": 1.320539, "process_kernel_time": 0.16336, "process_mem_max_rss": "130564096", "process_in_blocks": "0", "process_out_blocks": "0"}
[0m12:18:53.205001 [debug] [MainThread]: Command `dbt run` succeeded at 12:18:53.204899 after 10.90 seconds
[0m12:18:53.205306 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1043c4750>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x104306110>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10446e350>]}
[0m12:18:53.205604 [debug] [MainThread]: Flushing usage events
[0m12:20:11.550786 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x105740510>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1057bd650>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1057be090>]}


============================== 12:20:11.552879 | 7293b6bf-3323-43ff-804d-6ab1a9476068 ==============================
[0m12:20:11.552879 [info ] [MainThread]: Running with dbt=1.7.5
[0m12:20:11.553148 [debug] [MainThread]: running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/Users/tom/.dbt', 'version_check': 'True', 'debug': 'False', 'log_path': '/Users/tom/Documents/ReadyPlayerMe/dbt/dev/logs', 'warn_error': 'None', 'fail_fast': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'invocation_command': 'dbt run', 'static_parser': 'True', 'introspect': 'True', 'target_path': 'None', 'log_format': 'default', 'send_anonymous_usage_stats': 'True'}
[0m12:20:11.664154 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '7293b6bf-3323-43ff-804d-6ab1a9476068', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x105e22650>]}
[0m12:20:11.693322 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '7293b6bf-3323-43ff-804d-6ab1a9476068', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1057bcc90>]}
[0m12:20:11.694399 [info ] [MainThread]: Registered adapter: redshift=1.7.2
[0m12:20:11.702191 [debug] [MainThread]: checksum: 9e195a7e2498115e3a0071333dd5a6b6a8f8586a16507edd6adb1ded89eccd5a, vars: {}, profile: , target: , version: 1.7.5
[0m12:20:11.730542 [debug] [MainThread]: Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.
[0m12:20:11.730745 [debug] [MainThread]: Partial parsing enabled, no changes found, skipping parsing
[0m12:20:11.731008 [warn ] [MainThread]: [[33mWARNING[0m]: Configuration paths exist in your dbt_project.yml file which do not apply to any resources.
There are 1 unused configuration paths:
- models.dev.example
[0m12:20:11.733420 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '7293b6bf-3323-43ff-804d-6ab1a9476068', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x106ec9d10>]}
[0m12:20:11.737899 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '7293b6bf-3323-43ff-804d-6ab1a9476068', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x106d9dc90>]}
[0m12:20:11.738107 [info ] [MainThread]: Found 1 model, 9 sources, 0 exposures, 0 metrics, 591 macros, 0 groups, 0 semantic models
[0m12:20:11.738254 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '7293b6bf-3323-43ff-804d-6ab1a9476068', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x105e2c510>]}
[0m12:20:11.738983 [info ] [MainThread]: 
[0m12:20:11.739328 [debug] [MainThread]: Acquiring new redshift connection 'master'
[0m12:20:11.739819 [debug] [ThreadPool]: Acquiring new redshift connection 'list_analytics'
[0m12:20:11.746518 [debug] [ThreadPool]: Using redshift connection "list_analytics"
[0m12:20:11.746687 [debug] [ThreadPool]: On list_analytics: /* {"app": "dbt", "dbt_version": "1.7.5", "profile_name": "dev", "target_name": "dev", "connection_name": "list_analytics"} */

    select distinct nspname from pg_namespace
[0m12:20:11.746809 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m12:20:11.748191 [debug] [ThreadPool]: Redshift adapter: Establishing connection using ssl with `sslmode` set to 'prefer'.To connect without ssl, set `sslmode` to 'disable'.
[0m12:20:11.748334 [debug] [ThreadPool]: Redshift adapter: Connecting to redshift with username/password based auth...
[0m12:20:12.620123 [debug] [ThreadPool]: SQL status: SUCCESS in 1.0 seconds
[0m12:20:12.627497 [debug] [ThreadPool]: On list_analytics: Close
[0m12:20:12.629527 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_analytics, now list_analytics_loads_staging)
[0m12:20:12.636343 [debug] [ThreadPool]: Using redshift connection "list_analytics_loads_staging"
[0m12:20:12.636635 [debug] [ThreadPool]: On list_analytics_loads_staging: BEGIN
[0m12:20:12.636871 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m12:20:12.637252 [debug] [ThreadPool]: Redshift adapter: Establishing connection using ssl with `sslmode` set to 'prefer'.To connect without ssl, set `sslmode` to 'disable'.
[0m12:20:12.637502 [debug] [ThreadPool]: Redshift adapter: Connecting to redshift with username/password based auth...
[0m12:20:13.546192 [debug] [ThreadPool]: SQL status: SUCCESS in 1.0 seconds
[0m12:20:13.547096 [debug] [ThreadPool]: Using redshift connection "list_analytics_loads_staging"
[0m12:20:13.547608 [debug] [ThreadPool]: On list_analytics_loads_staging: /* {"app": "dbt", "dbt_version": "1.7.5", "profile_name": "dev", "target_name": "dev", "connection_name": "list_analytics_loads_staging"} */
select
        table_catalog as database,
        table_name as name,
        table_schema as schema,
        'table' as type
    from information_schema.tables
    where table_schema ilike 'loads_staging'
    and table_type = 'BASE TABLE'
    union all
    select
      table_catalog as database,
      table_name as name,
      table_schema as schema,
      case
        when view_definition ilike '%create materialized view%'
          then 'materialized_view'
        else 'view'
      end as type
    from information_schema.views
    where table_schema ilike 'loads_staging'
[0m12:20:13.777271 [debug] [ThreadPool]: SQL status: SUCCESS in 0.0 seconds
[0m12:20:13.778725 [debug] [ThreadPool]: On list_analytics_loads_staging: ROLLBACK
[0m12:20:13.977221 [debug] [ThreadPool]: On list_analytics_loads_staging: Close
[0m12:20:13.991645 [debug] [MainThread]: Using redshift connection "master"
[0m12:20:13.992137 [debug] [MainThread]: On master: BEGIN
[0m12:20:13.992514 [debug] [MainThread]: Opening a new connection, currently in state init
[0m12:20:13.993134 [debug] [MainThread]: Redshift adapter: Establishing connection using ssl with `sslmode` set to 'prefer'.To connect without ssl, set `sslmode` to 'disable'.
[0m12:20:13.993585 [debug] [MainThread]: Redshift adapter: Connecting to redshift with username/password based auth...
[0m12:20:14.806060 [debug] [MainThread]: SQL status: SUCCESS in 1.0 seconds
[0m12:20:14.807576 [debug] [MainThread]: Using redshift connection "master"
[0m12:20:14.808292 [debug] [MainThread]: On master: /* {"app": "dbt", "dbt_version": "1.7.5", "profile_name": "dev", "target_name": "dev", "connection_name": "master"} */
with
    relation as (
        select
            pg_class.oid as relation_id,
            pg_class.relname as relation_name,
            pg_class.relnamespace as schema_id,
            pg_namespace.nspname as schema_name,
            pg_class.relkind as relation_type
        from pg_class
        join pg_namespace
          on pg_class.relnamespace = pg_namespace.oid
        where pg_namespace.nspname != 'information_schema'
          and pg_namespace.nspname not like 'pg\_%'
    ),
    dependency as (
        select distinct
            coalesce(pg_rewrite.ev_class, pg_depend.objid) as dep_relation_id,
            pg_depend.refobjid as ref_relation_id,
            pg_depend.refclassid as ref_class_id
        from pg_depend
        left join pg_rewrite
          on pg_depend.objid = pg_rewrite.oid
        where coalesce(pg_rewrite.ev_class, pg_depend.objid) != pg_depend.refobjid
    )

select distinct
    dep.schema_name as dependent_schema,
    dep.relation_name as dependent_name,
    ref.schema_name as referenced_schema,
    ref.relation_name as referenced_name
from dependency
join relation ref
    on dependency.ref_relation_id = ref.relation_id
join relation dep
    on dependency.dep_relation_id = dep.relation_id
[0m12:20:15.268909 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m12:20:15.271331 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '7293b6bf-3323-43ff-804d-6ab1a9476068', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x105e95f90>]}
[0m12:20:15.272064 [debug] [MainThread]: On master: ROLLBACK
[0m12:20:15.597166 [debug] [MainThread]: Using redshift connection "master"
[0m12:20:15.597615 [debug] [MainThread]: On master: BEGIN
[0m12:20:15.690519 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m12:20:15.691854 [debug] [MainThread]: On master: COMMIT
[0m12:20:15.692668 [debug] [MainThread]: Using redshift connection "master"
[0m12:20:15.693208 [debug] [MainThread]: On master: COMMIT
[0m12:20:15.901679 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m12:20:15.903322 [debug] [MainThread]: On master: Close
[0m12:20:15.906773 [info ] [MainThread]: Concurrency: 1 threads (target='dev')
[0m12:20:15.908050 [info ] [MainThread]: 
[0m12:20:15.912532 [debug] [Thread-1 (]: Began running node model.dev.organisations_created
[0m12:20:15.913445 [info ] [Thread-1 (]: 1 of 1 START sql view model loads_staging.organisations_created ................ [RUN]
[0m12:20:15.914547 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly list_analytics_loads_staging, now model.dev.organisations_created)
[0m12:20:15.915076 [debug] [Thread-1 (]: Began compiling node model.dev.organisations_created
[0m12:20:15.920832 [debug] [Thread-1 (]: Writing injected SQL for node "model.dev.organisations_created"
[0m12:20:15.922060 [debug] [Thread-1 (]: Timing info for model.dev.organisations_created (compile): 12:20:15.915434 => 12:20:15.921774
[0m12:20:15.922524 [debug] [Thread-1 (]: Began executing node model.dev.organisations_created
[0m12:20:15.949197 [debug] [Thread-1 (]: Writing runtime sql for node "model.dev.organisations_created"
[0m12:20:15.952954 [debug] [Thread-1 (]: Using redshift connection "model.dev.organisations_created"
[0m12:20:15.953194 [debug] [Thread-1 (]: On model.dev.organisations_created: BEGIN
[0m12:20:15.953385 [debug] [Thread-1 (]: Opening a new connection, currently in state closed
[0m12:20:15.953657 [debug] [Thread-1 (]: Redshift adapter: Establishing connection using ssl with `sslmode` set to 'prefer'.To connect without ssl, set `sslmode` to 'disable'.
[0m12:20:15.953858 [debug] [Thread-1 (]: Redshift adapter: Connecting to redshift with username/password based auth...
[0m12:20:16.821365 [debug] [Thread-1 (]: SQL status: SUCCESS in 1.0 seconds
[0m12:20:16.823433 [debug] [Thread-1 (]: Using redshift connection "model.dev.organisations_created"
[0m12:20:16.824555 [debug] [Thread-1 (]: On model.dev.organisations_created: /* {"app": "dbt", "dbt_version": "1.7.5", "profile_name": "dev", "target_name": "dev", "node_id": "model.dev.organisations_created"} */


  create view "analytics"."loads_staging"."organisations_created__dbt_tmp" as (
    

WITH 
historic AS (
    SELECT *
    FROM source.dbt_seeds_organizations
),
created AS (
    SELECT _id AS organization_id,
           hubspottrackingcode AS hubspot_tracking_code,
           COALESCE(NAME, productname) AS organization_name,
           productname AS product_name,
           employees AS employee_bucket,
           website,
           planstouserpm AS plans_to_use_rpm,
           "references" AS reference,
           createdat AS created_at,
           updatedat AS updated_at,
           ROW_NUMBER() OVER (PARTITION BY hubspot_tracking_code ORDER BY updated_at DESC) AS row_number
    FROM "analytics"."source"."auth_service_v1_organization_created"
),
created_dedup AS (
    SELECT *
    FROM created
    WHERE row_number = 1
),
combined AS (
    SELECT organization_id,
           hubspot_id,
           NULL AS hubspot_tracking_code,
           organization_name,
           product_name,
           employee_bucket,
           website,
           plans_to_use_rpm,
           reference,
           created_at::timestamp,
           updated_at::timestamp
    FROM historic
    UNION ALL
    SELECT organization_id,
           NULL AS hubspot_id,
           hubspot_tracking_code,
           organization_name,
           product_name,
           employee_bucket,
           website,
           plans_to_use_rpm,
           reference,
           created_at,
           updated_at
    FROM created_dedup
),
latest_organization_record AS (
    SELECT *,
           ROW_NUMBER() OVER (PARTITION BY organization_id ORDER BY updated_at DESC) AS row_number
    FROM combined
)
SELECT latest_organization_record.organization_id
     , latest_organization_record.hubspot_id
     , latest_organization_record.hubspot_tracking_code
     , latest_organization_record.organization_name
     , latest_organization_record.product_name
     , latest_organization_record.employee_bucket
     , latest_organization_record.website
     , latest_organization_record.plans_to_use_rpm
     , latest_organization_record.reference
     , latest_organization_record.created_at
     , latest_organization_record.updated_at
FROM latest_organization_record
WHERE row_number = 1
GROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11
  ) ;
[0m12:20:17.213480 [debug] [Thread-1 (]: SQL status: SUCCESS in 0.0 seconds
[0m12:20:17.215900 [debug] [Thread-1 (]: On model.dev.organisations_created: COMMIT
[0m12:20:17.216620 [debug] [Thread-1 (]: Using redshift connection "model.dev.organisations_created"
[0m12:20:17.217115 [debug] [Thread-1 (]: On model.dev.organisations_created: COMMIT
[0m12:20:31.152162 [debug] [Thread-1 (]: SQL status: SUCCESS in 14.0 seconds
[0m12:20:31.154301 [debug] [Thread-1 (]: Using redshift connection "model.dev.organisations_created"
[0m12:20:31.155559 [debug] [Thread-1 (]: On model.dev.organisations_created: BEGIN
[0m12:20:31.348080 [debug] [Thread-1 (]: SQL status: SUCCESS in 0.0 seconds
[0m12:20:31.369450 [debug] [Thread-1 (]: Applying DROP to: "analytics"."loads_staging"."organisations_created"
[0m12:20:31.376566 [debug] [Thread-1 (]: Using redshift connection "model.dev.organisations_created"
[0m12:20:31.377072 [debug] [Thread-1 (]: On model.dev.organisations_created: /* {"app": "dbt", "dbt_version": "1.7.5", "profile_name": "dev", "target_name": "dev", "node_id": "model.dev.organisations_created"} */
drop view if exists "analytics"."loads_staging"."organisations_created" cascade
[0m12:20:31.568769 [debug] [Thread-1 (]: SQL status: SUCCESS in 0.0 seconds
[0m12:20:31.572239 [debug] [Thread-1 (]: On model.dev.organisations_created: COMMIT
[0m12:20:31.573717 [debug] [Thread-1 (]: Using redshift connection "model.dev.organisations_created"
[0m12:20:31.574887 [debug] [Thread-1 (]: On model.dev.organisations_created: COMMIT
[0m12:20:31.865743 [debug] [Thread-1 (]: SQL status: SUCCESS in 0.0 seconds
[0m12:20:31.867988 [debug] [Thread-1 (]: Using redshift connection "model.dev.organisations_created"
[0m12:20:31.869276 [debug] [Thread-1 (]: On model.dev.organisations_created: BEGIN
[0m12:20:31.978888 [debug] [Thread-1 (]: SQL status: SUCCESS in 0.0 seconds
[0m12:20:31.996584 [debug] [Thread-1 (]: Using redshift connection "model.dev.organisations_created"
[0m12:20:31.997386 [debug] [Thread-1 (]: On model.dev.organisations_created: /* {"app": "dbt", "dbt_version": "1.7.5", "profile_name": "dev", "target_name": "dev", "node_id": "model.dev.organisations_created"} */
alter table "analytics"."loads_staging"."organisations_created__dbt_tmp" rename to "organisations_created"
[0m12:20:32.572134 [debug] [Thread-1 (]: SQL status: SUCCESS in 1.0 seconds
[0m12:20:32.605402 [debug] [Thread-1 (]: On model.dev.organisations_created: COMMIT
[0m12:20:32.606254 [debug] [Thread-1 (]: Using redshift connection "model.dev.organisations_created"
[0m12:20:32.606717 [debug] [Thread-1 (]: On model.dev.organisations_created: COMMIT
[0m12:20:32.926993 [debug] [Thread-1 (]: SQL status: SUCCESS in 0.0 seconds
[0m12:20:32.929489 [debug] [Thread-1 (]: Using redshift connection "model.dev.organisations_created"
[0m12:20:32.930731 [debug] [Thread-1 (]: On model.dev.organisations_created: BEGIN
[0m12:20:33.210778 [debug] [Thread-1 (]: SQL status: SUCCESS in 0.0 seconds
[0m12:20:33.219766 [debug] [Thread-1 (]: Applying DROP to: "analytics"."loads_staging"."organisations_created__dbt_backup"
[0m12:20:33.222605 [debug] [Thread-1 (]: Using redshift connection "model.dev.organisations_created"
[0m12:20:33.223260 [debug] [Thread-1 (]: On model.dev.organisations_created: /* {"app": "dbt", "dbt_version": "1.7.5", "profile_name": "dev", "target_name": "dev", "node_id": "model.dev.organisations_created"} */
drop view if exists "analytics"."loads_staging"."organisations_created__dbt_backup" cascade
[0m12:20:33.413055 [debug] [Thread-1 (]: SQL status: SUCCESS in 0.0 seconds
[0m12:20:33.416517 [debug] [Thread-1 (]: On model.dev.organisations_created: COMMIT
[0m12:20:33.418049 [debug] [Thread-1 (]: Using redshift connection "model.dev.organisations_created"
[0m12:20:33.419209 [debug] [Thread-1 (]: On model.dev.organisations_created: COMMIT
[0m12:20:33.616008 [debug] [Thread-1 (]: SQL status: SUCCESS in 0.0 seconds
[0m12:20:33.617979 [debug] [Thread-1 (]: Using redshift connection "model.dev.organisations_created"
[0m12:20:33.619199 [debug] [Thread-1 (]: On model.dev.organisations_created: BEGIN
[0m12:20:33.712809 [debug] [Thread-1 (]: SQL status: SUCCESS in 0.0 seconds
[0m12:20:33.716288 [debug] [Thread-1 (]: Timing info for model.dev.organisations_created (execute): 12:20:15.922762 => 12:20:33.715619
[0m12:20:33.717592 [debug] [Thread-1 (]: On model.dev.organisations_created: ROLLBACK
[0m12:20:33.918029 [debug] [Thread-1 (]: On model.dev.organisations_created: Close
[0m12:20:33.921485 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '7293b6bf-3323-43ff-804d-6ab1a9476068', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1070e9c10>]}
[0m12:20:33.923465 [info ] [Thread-1 (]: 1 of 1 OK created sql view model loads_staging.organisations_created ........... [[32mSUCCESS[0m in 18.01s]
[0m12:20:33.925278 [debug] [Thread-1 (]: Finished running node model.dev.organisations_created
[0m12:20:33.929252 [debug] [MainThread]: Using redshift connection "master"
[0m12:20:33.930086 [debug] [MainThread]: On master: BEGIN
[0m12:20:33.930831 [debug] [MainThread]: Opening a new connection, currently in state closed
[0m12:20:33.931954 [debug] [MainThread]: Redshift adapter: Establishing connection using ssl with `sslmode` set to 'prefer'.To connect without ssl, set `sslmode` to 'disable'.
[0m12:20:33.932741 [debug] [MainThread]: Redshift adapter: Connecting to redshift with username/password based auth...
[0m12:20:34.825238 [debug] [MainThread]: SQL status: SUCCESS in 1.0 seconds
[0m12:20:34.826760 [debug] [MainThread]: On master: COMMIT
[0m12:20:34.828054 [debug] [MainThread]: Using redshift connection "master"
[0m12:20:34.829002 [debug] [MainThread]: On master: COMMIT
[0m12:20:35.044397 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m12:20:35.044803 [debug] [MainThread]: On master: Close
[0m12:20:35.045438 [debug] [MainThread]: Connection 'master' was properly closed.
[0m12:20:35.045643 [debug] [MainThread]: Connection 'model.dev.organisations_created' was properly closed.
[0m12:20:35.045855 [info ] [MainThread]: 
[0m12:20:35.046088 [info ] [MainThread]: Finished running 1 view model in 0 hours 0 minutes and 23.31 seconds (23.31s).
[0m12:20:35.046476 [debug] [MainThread]: Command end result
[0m12:20:35.053387 [info ] [MainThread]: 
[0m12:20:35.053621 [info ] [MainThread]: [32mCompleted successfully[0m
[0m12:20:35.053802 [info ] [MainThread]: 
[0m12:20:35.053985 [info ] [MainThread]: Done. PASS=1 WARN=0 ERROR=0 SKIP=0 TOTAL=1
[0m12:20:35.055619 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": true, "command_wall_clock_time": 23.526955, "process_user_time": 1.243514, "process_kernel_time": 0.172127, "process_mem_max_rss": "128008192", "process_in_blocks": "0", "process_out_blocks": "0"}
[0m12:20:35.055980 [debug] [MainThread]: Command `dbt run` succeeded at 12:20:35.055908 after 23.53 seconds
[0m12:20:35.056205 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1057bfa50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1057bda50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1007be310>]}
[0m12:20:35.056414 [debug] [MainThread]: Flushing usage events
[0m12:21:10.794163 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1103411d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11038b1d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1103be2d0>]}


============================== 12:21:10.796081 | e49742ef-bacd-4244-9668-82eaf4da31d8 ==============================
[0m12:21:10.796081 [info ] [MainThread]: Running with dbt=1.7.5
[0m12:21:10.796345 [debug] [MainThread]: running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/Users/tom/.dbt', 'version_check': 'True', 'debug': 'False', 'log_path': '/Users/tom/Documents/ReadyPlayerMe/dbt/dev/logs', 'warn_error': 'None', 'fail_fast': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'log_format': 'default', 'invocation_command': 'dbt run', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'introspect': 'True', 'target_path': 'None', 'static_parser': 'True', 'send_anonymous_usage_stats': 'True'}
[0m12:21:10.892793 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'e49742ef-bacd-4244-9668-82eaf4da31d8', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x110333ad0>]}
[0m12:21:10.922009 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'e49742ef-bacd-4244-9668-82eaf4da31d8', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x110a25b90>]}
[0m12:21:10.922704 [info ] [MainThread]: Registered adapter: redshift=1.7.2
[0m12:21:10.930965 [debug] [MainThread]: checksum: 9e195a7e2498115e3a0071333dd5a6b6a8f8586a16507edd6adb1ded89eccd5a, vars: {}, profile: , target: , version: 1.7.5
[0m12:21:10.959990 [debug] [MainThread]: Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.
[0m12:21:10.960238 [debug] [MainThread]: Partial parsing enabled, no changes found, skipping parsing
[0m12:21:10.960548 [warn ] [MainThread]: [[33mWARNING[0m]: Configuration paths exist in your dbt_project.yml file which do not apply to any resources.
There are 1 unused configuration paths:
- models.dev.example
[0m12:21:10.963109 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'e49742ef-bacd-4244-9668-82eaf4da31d8', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x110ebfe90>]}
[0m12:21:10.967918 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'e49742ef-bacd-4244-9668-82eaf4da31d8', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x110fb1710>]}
[0m12:21:10.968111 [info ] [MainThread]: Found 1 model, 9 sources, 0 exposures, 0 metrics, 591 macros, 0 groups, 0 semantic models
[0m12:21:10.968259 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'e49742ef-bacd-4244-9668-82eaf4da31d8', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x110a78d50>]}
[0m12:21:10.969009 [info ] [MainThread]: 
[0m12:21:10.969366 [debug] [MainThread]: Acquiring new redshift connection 'master'
[0m12:21:10.969910 [debug] [ThreadPool]: Acquiring new redshift connection 'list_analytics'
[0m12:21:10.976585 [debug] [ThreadPool]: Using redshift connection "list_analytics"
[0m12:21:10.976764 [debug] [ThreadPool]: On list_analytics: /* {"app": "dbt", "dbt_version": "1.7.5", "profile_name": "dev", "target_name": "dev", "connection_name": "list_analytics"} */

    select distinct nspname from pg_namespace
[0m12:21:10.976889 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m12:21:10.978161 [debug] [ThreadPool]: Redshift adapter: Establishing connection using ssl with `sslmode` set to 'prefer'.To connect without ssl, set `sslmode` to 'disable'.
[0m12:21:10.978291 [debug] [ThreadPool]: Redshift adapter: Connecting to redshift with username/password based auth...
[0m12:21:11.809220 [debug] [ThreadPool]: SQL status: SUCCESS in 1.0 seconds
[0m12:21:11.815422 [debug] [ThreadPool]: On list_analytics: Close
[0m12:21:11.817869 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_analytics, now create_analytics_loads_staging)
[0m12:21:11.818920 [debug] [ThreadPool]: Creating schema "database: "analytics"
schema: "loads_staging"
"
[0m12:21:11.828108 [debug] [ThreadPool]: Using redshift connection "create_analytics_loads_staging"
[0m12:21:11.828602 [debug] [ThreadPool]: On create_analytics_loads_staging: BEGIN
[0m12:21:11.828932 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m12:21:11.829439 [debug] [ThreadPool]: Redshift adapter: Establishing connection using ssl with `sslmode` set to 'prefer'.To connect without ssl, set `sslmode` to 'disable'.
[0m12:21:11.829763 [debug] [ThreadPool]: Redshift adapter: Connecting to redshift with username/password based auth...
[0m12:21:12.737745 [debug] [ThreadPool]: SQL status: SUCCESS in 1.0 seconds
[0m12:21:12.739671 [debug] [ThreadPool]: Using redshift connection "create_analytics_loads_staging"
[0m12:21:12.740818 [debug] [ThreadPool]: On create_analytics_loads_staging: /* {"app": "dbt", "dbt_version": "1.7.5", "profile_name": "dev", "target_name": "dev", "connection_name": "create_analytics_loads_staging"} */
create schema if not exists "loads_staging"
[0m12:21:13.132279 [debug] [ThreadPool]: SQL status: SUCCESS in 0.0 seconds
[0m12:21:13.135120 [debug] [ThreadPool]: On create_analytics_loads_staging: COMMIT
[0m12:21:13.136064 [debug] [ThreadPool]: Using redshift connection "create_analytics_loads_staging"
[0m12:21:13.136668 [debug] [ThreadPool]: On create_analytics_loads_staging: COMMIT
[0m12:21:13.449457 [debug] [ThreadPool]: SQL status: SUCCESS in 0.0 seconds
[0m12:21:13.449983 [debug] [ThreadPool]: On create_analytics_loads_staging: Close
[0m12:21:13.451511 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly create_analytics_loads_staging, now list_analytics_loads_staging)
[0m12:21:13.455371 [debug] [ThreadPool]: Using redshift connection "list_analytics_loads_staging"
[0m12:21:13.455522 [debug] [ThreadPool]: On list_analytics_loads_staging: BEGIN
[0m12:21:13.455630 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m12:21:13.455864 [debug] [ThreadPool]: Redshift adapter: Establishing connection using ssl with `sslmode` set to 'prefer'.To connect without ssl, set `sslmode` to 'disable'.
[0m12:21:13.455980 [debug] [ThreadPool]: Redshift adapter: Connecting to redshift with username/password based auth...
[0m12:21:14.374382 [debug] [ThreadPool]: SQL status: SUCCESS in 1.0 seconds
[0m12:21:14.376196 [debug] [ThreadPool]: Using redshift connection "list_analytics_loads_staging"
[0m12:21:14.377503 [debug] [ThreadPool]: On list_analytics_loads_staging: /* {"app": "dbt", "dbt_version": "1.7.5", "profile_name": "dev", "target_name": "dev", "connection_name": "list_analytics_loads_staging"} */
select
        table_catalog as database,
        table_name as name,
        table_schema as schema,
        'table' as type
    from information_schema.tables
    where table_schema ilike 'loads_staging'
    and table_type = 'BASE TABLE'
    union all
    select
      table_catalog as database,
      table_name as name,
      table_schema as schema,
      case
        when view_definition ilike '%create materialized view%'
          then 'materialized_view'
        else 'view'
      end as type
    from information_schema.views
    where table_schema ilike 'loads_staging'
[0m12:21:14.680295 [debug] [ThreadPool]: SQL status: SUCCESS in 0.0 seconds
[0m12:21:14.682988 [debug] [ThreadPool]: On list_analytics_loads_staging: ROLLBACK
[0m12:21:14.987573 [debug] [ThreadPool]: On list_analytics_loads_staging: Close
[0m12:21:15.000014 [debug] [MainThread]: Using redshift connection "master"
[0m12:21:15.000552 [debug] [MainThread]: On master: BEGIN
[0m12:21:15.000919 [debug] [MainThread]: Opening a new connection, currently in state init
[0m12:21:15.001501 [debug] [MainThread]: Redshift adapter: Establishing connection using ssl with `sslmode` set to 'prefer'.To connect without ssl, set `sslmode` to 'disable'.
[0m12:21:15.001858 [debug] [MainThread]: Redshift adapter: Connecting to redshift with username/password based auth...
[0m12:21:15.894986 [debug] [MainThread]: SQL status: SUCCESS in 1.0 seconds
[0m12:21:15.896782 [debug] [MainThread]: Using redshift connection "master"
[0m12:21:15.898107 [debug] [MainThread]: On master: /* {"app": "dbt", "dbt_version": "1.7.5", "profile_name": "dev", "target_name": "dev", "connection_name": "master"} */
with
    relation as (
        select
            pg_class.oid as relation_id,
            pg_class.relname as relation_name,
            pg_class.relnamespace as schema_id,
            pg_namespace.nspname as schema_name,
            pg_class.relkind as relation_type
        from pg_class
        join pg_namespace
          on pg_class.relnamespace = pg_namespace.oid
        where pg_namespace.nspname != 'information_schema'
          and pg_namespace.nspname not like 'pg\_%'
    ),
    dependency as (
        select distinct
            coalesce(pg_rewrite.ev_class, pg_depend.objid) as dep_relation_id,
            pg_depend.refobjid as ref_relation_id,
            pg_depend.refclassid as ref_class_id
        from pg_depend
        left join pg_rewrite
          on pg_depend.objid = pg_rewrite.oid
        where coalesce(pg_rewrite.ev_class, pg_depend.objid) != pg_depend.refobjid
    )

select distinct
    dep.schema_name as dependent_schema,
    dep.relation_name as dependent_name,
    ref.schema_name as referenced_schema,
    ref.relation_name as referenced_name
from dependency
join relation ref
    on dependency.ref_relation_id = ref.relation_id
join relation dep
    on dependency.dep_relation_id = dep.relation_id
[0m12:21:16.277059 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m12:21:16.283167 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'e49742ef-bacd-4244-9668-82eaf4da31d8', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11125a690>]}
[0m12:21:16.284013 [debug] [MainThread]: On master: ROLLBACK
[0m12:21:16.534570 [debug] [MainThread]: Using redshift connection "master"
[0m12:21:16.536104 [debug] [MainThread]: On master: BEGIN
[0m12:21:16.634121 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m12:21:16.634959 [debug] [MainThread]: On master: COMMIT
[0m12:21:16.635755 [debug] [MainThread]: Using redshift connection "master"
[0m12:21:16.636332 [debug] [MainThread]: On master: COMMIT
[0m12:21:16.822476 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m12:21:16.823860 [debug] [MainThread]: On master: Close
[0m12:21:16.827156 [info ] [MainThread]: Concurrency: 1 threads (target='dev')
[0m12:21:16.828082 [info ] [MainThread]: 
[0m12:21:16.832017 [debug] [Thread-1 (]: Began running node model.dev.organisations_created
[0m12:21:16.832806 [info ] [Thread-1 (]: 1 of 1 START sql view model loads_staging.organisations_created ................ [RUN]
[0m12:21:16.833917 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly list_analytics_loads_staging, now model.dev.organisations_created)
[0m12:21:16.834431 [debug] [Thread-1 (]: Began compiling node model.dev.organisations_created
[0m12:21:16.839897 [debug] [Thread-1 (]: Writing injected SQL for node "model.dev.organisations_created"
[0m12:21:16.841083 [debug] [Thread-1 (]: Timing info for model.dev.organisations_created (compile): 12:21:16.834765 => 12:21:16.840801
[0m12:21:16.841532 [debug] [Thread-1 (]: Began executing node model.dev.organisations_created
[0m12:21:16.868385 [debug] [Thread-1 (]: Writing runtime sql for node "model.dev.organisations_created"
[0m12:21:16.871533 [debug] [Thread-1 (]: Using redshift connection "model.dev.organisations_created"
[0m12:21:16.871814 [debug] [Thread-1 (]: On model.dev.organisations_created: BEGIN
[0m12:21:16.872021 [debug] [Thread-1 (]: Opening a new connection, currently in state closed
[0m12:21:16.872317 [debug] [Thread-1 (]: Redshift adapter: Establishing connection using ssl with `sslmode` set to 'prefer'.To connect without ssl, set `sslmode` to 'disable'.
[0m12:21:16.872533 [debug] [Thread-1 (]: Redshift adapter: Connecting to redshift with username/password based auth...
[0m12:21:17.741900 [debug] [Thread-1 (]: SQL status: SUCCESS in 1.0 seconds
[0m12:21:17.743762 [debug] [Thread-1 (]: Using redshift connection "model.dev.organisations_created"
[0m12:21:17.745364 [debug] [Thread-1 (]: On model.dev.organisations_created: /* {"app": "dbt", "dbt_version": "1.7.5", "profile_name": "dev", "target_name": "dev", "node_id": "model.dev.organisations_created"} */


  create view "analytics"."loads_staging"."organisations_created__dbt_tmp" as (
    

WITH 
historic AS (
    SELECT *
    FROM source.dbt_seeds_organizations
),
created AS (
    SELECT _id AS organization_id,
           hubspottrackingcode AS hubspot_tracking_code,
           COALESCE(NAME, productname) AS organization_name,
           productname AS product_name,
           employees AS employee_bucket,
           website,
           planstouserpm AS plans_to_use_rpm,
           "references" AS reference,
           createdat AS created_at,
           updatedat AS updated_at,
           ROW_NUMBER() OVER (PARTITION BY hubspot_tracking_code ORDER BY updated_at DESC) AS row_number
    FROM "analytics"."source"."auth_service_v1_organization_created"
),
created_dedup AS (
    SELECT *
    FROM created
    WHERE row_number = 1
),
combined AS (
    SELECT organization_id,
           hubspot_id,
           NULL AS hubspot_tracking_code,
           organization_name,
           product_name,
           employee_bucket,
           website,
           plans_to_use_rpm,
           reference,
           created_at::timestamp,
           updated_at::timestamp
    FROM historic
    UNION ALL
    SELECT organization_id,
           NULL AS hubspot_id,
           hubspot_tracking_code,
           organization_name,
           product_name,
           employee_bucket,
           website,
           plans_to_use_rpm,
           reference,
           created_at,
           updated_at
    FROM created_dedup
),
latest_organization_record AS (
    SELECT *,
           ROW_NUMBER() OVER (PARTITION BY organization_id ORDER BY updated_at DESC) AS row_number
    FROM combined
)
SELECT latest_organization_record.organization_id
     , latest_organization_record.hubspot_id
     , latest_organization_record.hubspot_tracking_code
     , latest_organization_record.organization_name
     , latest_organization_record.product_name
     , latest_organization_record.employee_bucket
     , latest_organization_record.website
     , latest_organization_record.plans_to_use_rpm
     , latest_organization_record.reference
     , latest_organization_record.created_at
     , latest_organization_record.updated_at
FROM latest_organization_record
WHERE row_number = 1
GROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11
  ) ;
[0m12:21:18.141164 [debug] [Thread-1 (]: SQL status: SUCCESS in 0.0 seconds
[0m12:21:18.157770 [debug] [Thread-1 (]: Using redshift connection "model.dev.organisations_created"
[0m12:21:18.158250 [debug] [Thread-1 (]: On model.dev.organisations_created: /* {"app": "dbt", "dbt_version": "1.7.5", "profile_name": "dev", "target_name": "dev", "node_id": "model.dev.organisations_created"} */
alter table "analytics"."loads_staging"."organisations_created__dbt_tmp" rename to "organisations_created"
[0m12:21:18.443044 [debug] [Thread-1 (]: SQL status: SUCCESS in 0.0 seconds
[0m12:21:18.462236 [debug] [Thread-1 (]: On model.dev.organisations_created: COMMIT
[0m12:21:18.462781 [debug] [Thread-1 (]: Using redshift connection "model.dev.organisations_created"
[0m12:21:18.463116 [debug] [Thread-1 (]: On model.dev.organisations_created: COMMIT
[0m12:21:18.888092 [debug] [Thread-1 (]: SQL status: SUCCESS in 0.0 seconds
[0m12:21:18.890938 [debug] [Thread-1 (]: Using redshift connection "model.dev.organisations_created"
[0m12:21:18.892156 [debug] [Thread-1 (]: On model.dev.organisations_created: BEGIN
[0m12:21:19.084213 [debug] [Thread-1 (]: SQL status: SUCCESS in 0.0 seconds
[0m12:21:19.096266 [debug] [Thread-1 (]: Applying DROP to: "analytics"."loads_staging"."organisations_created__dbt_backup"
[0m12:21:19.100565 [debug] [Thread-1 (]: Using redshift connection "model.dev.organisations_created"
[0m12:21:19.100889 [debug] [Thread-1 (]: On model.dev.organisations_created: /* {"app": "dbt", "dbt_version": "1.7.5", "profile_name": "dev", "target_name": "dev", "node_id": "model.dev.organisations_created"} */
drop view if exists "analytics"."loads_staging"."organisations_created__dbt_backup" cascade
[0m12:21:19.299868 [debug] [Thread-1 (]: SQL status: SUCCESS in 0.0 seconds
[0m12:21:19.303858 [debug] [Thread-1 (]: On model.dev.organisations_created: COMMIT
[0m12:21:19.305440 [debug] [Thread-1 (]: Using redshift connection "model.dev.organisations_created"
[0m12:21:19.306615 [debug] [Thread-1 (]: On model.dev.organisations_created: COMMIT
[0m12:21:19.527199 [debug] [Thread-1 (]: SQL status: SUCCESS in 0.0 seconds
[0m12:21:19.528806 [debug] [Thread-1 (]: Using redshift connection "model.dev.organisations_created"
[0m12:21:19.529484 [debug] [Thread-1 (]: On model.dev.organisations_created: BEGIN
[0m12:21:19.698503 [debug] [Thread-1 (]: SQL status: SUCCESS in 0.0 seconds
[0m12:21:19.701237 [debug] [Thread-1 (]: Timing info for model.dev.organisations_created (execute): 12:21:16.841762 => 12:21:19.700854
[0m12:21:19.701898 [debug] [Thread-1 (]: On model.dev.organisations_created: ROLLBACK
[0m12:21:19.906187 [debug] [Thread-1 (]: On model.dev.organisations_created: Close
[0m12:21:19.909147 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'e49742ef-bacd-4244-9668-82eaf4da31d8', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x110f4c410>]}
[0m12:21:19.910440 [info ] [Thread-1 (]: 1 of 1 OK created sql view model loads_staging.organisations_created ........... [[32mSUCCESS[0m in 3.08s]
[0m12:21:19.911483 [debug] [Thread-1 (]: Finished running node model.dev.organisations_created
[0m12:21:19.914015 [debug] [MainThread]: Using redshift connection "master"
[0m12:21:19.914463 [debug] [MainThread]: On master: BEGIN
[0m12:21:19.914840 [debug] [MainThread]: Opening a new connection, currently in state closed
[0m12:21:19.915478 [debug] [MainThread]: Redshift adapter: Establishing connection using ssl with `sslmode` set to 'prefer'.To connect without ssl, set `sslmode` to 'disable'.
[0m12:21:19.915849 [debug] [MainThread]: Redshift adapter: Connecting to redshift with username/password based auth...
[0m12:21:21.038592 [debug] [MainThread]: SQL status: SUCCESS in 1.0 seconds
[0m12:21:21.040075 [debug] [MainThread]: On master: COMMIT
[0m12:21:21.040822 [debug] [MainThread]: Using redshift connection "master"
[0m12:21:21.041398 [debug] [MainThread]: On master: COMMIT
[0m12:21:21.442772 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m12:21:21.444338 [debug] [MainThread]: On master: Close
[0m12:21:21.447374 [debug] [MainThread]: Connection 'master' was properly closed.
[0m12:21:21.448376 [debug] [MainThread]: Connection 'model.dev.organisations_created' was properly closed.
[0m12:21:21.449327 [info ] [MainThread]: 
[0m12:21:21.449853 [info ] [MainThread]: Finished running 1 view model in 0 hours 0 minutes and 10.48 seconds (10.48s).
[0m12:21:21.450736 [debug] [MainThread]: Command end result
[0m12:21:21.463968 [info ] [MainThread]: 
[0m12:21:21.464481 [info ] [MainThread]: [32mCompleted successfully[0m
[0m12:21:21.464749 [info ] [MainThread]: 
[0m12:21:21.465029 [info ] [MainThread]: Done. PASS=1 WARN=0 ERROR=0 SKIP=0 TOTAL=1
[0m12:21:21.467184 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": true, "command_wall_clock_time": 10.694973, "process_user_time": 1.243362, "process_kernel_time": 0.154249, "process_mem_max_rss": "127221760", "process_in_blocks": "0", "process_out_blocks": "0"}
[0m12:21:21.467732 [debug] [MainThread]: Command `dbt run` succeeded at 12:21:21.467621 after 10.70 seconds
[0m12:21:21.468085 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1103bdb50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1103bdb90>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x102e1a110>]}
[0m12:21:21.468411 [debug] [MainThread]: Flushing usage events
[0m12:28:32.619105 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x105d41710>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x105dbd910>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x105dbe350>]}


============================== 12:28:32.621256 | 43b5b2af-d4f7-462c-bcd2-46355d724219 ==============================
[0m12:28:32.621256 [info ] [MainThread]: Running with dbt=1.7.5
[0m12:28:32.621527 [debug] [MainThread]: running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'fail_fast': 'False', 'profiles_dir': '/Users/tom/.dbt', 'log_path': '/Users/tom/Documents/ReadyPlayerMe/dbt/dev/logs', 'debug': 'False', 'version_check': 'True', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'log_format': 'default', 'static_parser': 'True', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'introspect': 'True', 'target_path': 'None', 'invocation_command': 'dbt run', 'send_anonymous_usage_stats': 'True'}
[0m12:28:32.732353 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '43b5b2af-d4f7-462c-bcd2-46355d724219', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x106901fd0>]}
[0m12:28:32.760653 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '43b5b2af-d4f7-462c-bcd2-46355d724219', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10299d1d0>]}
[0m12:28:32.761243 [info ] [MainThread]: Registered adapter: redshift=1.7.2
[0m12:28:32.768974 [debug] [MainThread]: checksum: 9e195a7e2498115e3a0071333dd5a6b6a8f8586a16507edd6adb1ded89eccd5a, vars: {}, profile: , target: , version: 1.7.5
[0m12:28:32.826236 [debug] [MainThread]: Partial parsing enabled: 0 files deleted, 1 files added, 1 files changed.
[0m12:28:32.827678 [debug] [MainThread]: Partial parsing: added file: dev://models/sources/dbt-automated-sources.yml
[0m12:28:32.827864 [debug] [MainThread]: Partial parsing: updated file: dev://models/organisations/staging/organisations_created.sql
[0m12:28:33.016236 [warn ] [MainThread]: [[33mWARNING[0m]: Configuration paths exist in your dbt_project.yml file which do not apply to any resources.
There are 1 unused configuration paths:
- models.dev.example
[0m12:28:33.019597 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '43b5b2af-d4f7-462c-bcd2-46355d724219', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1071af250>]}
[0m12:28:33.057271 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '43b5b2af-d4f7-462c-bcd2-46355d724219', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x106ca0110>]}
[0m12:28:33.057510 [info ] [MainThread]: Found 1 model, 85 sources, 0 exposures, 0 metrics, 591 macros, 0 groups, 0 semantic models
[0m12:28:33.057667 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '43b5b2af-d4f7-462c-bcd2-46355d724219', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x104356890>]}
[0m12:28:33.058612 [info ] [MainThread]: 
[0m12:28:33.058943 [debug] [MainThread]: Acquiring new redshift connection 'master'
[0m12:28:33.059375 [debug] [ThreadPool]: Acquiring new redshift connection 'list_analytics'
[0m12:28:33.065609 [debug] [ThreadPool]: Using redshift connection "list_analytics"
[0m12:28:33.065811 [debug] [ThreadPool]: On list_analytics: /* {"app": "dbt", "dbt_version": "1.7.5", "profile_name": "dev", "target_name": "dev", "connection_name": "list_analytics"} */

    select distinct nspname from pg_namespace
[0m12:28:33.065931 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m12:28:33.067375 [debug] [ThreadPool]: Redshift adapter: Establishing connection using ssl with `sslmode` set to 'prefer'.To connect without ssl, set `sslmode` to 'disable'.
[0m12:28:33.067537 [debug] [ThreadPool]: Redshift adapter: Connecting to redshift with username/password based auth...
[0m12:28:33.989682 [debug] [ThreadPool]: SQL status: SUCCESS in 1.0 seconds
[0m12:28:33.994936 [debug] [ThreadPool]: On list_analytics: Close
[0m12:28:33.998482 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_analytics, now list_analytics_loads_staging)
[0m12:28:34.008795 [debug] [ThreadPool]: Using redshift connection "list_analytics_loads_staging"
[0m12:28:34.009267 [debug] [ThreadPool]: On list_analytics_loads_staging: BEGIN
[0m12:28:34.009552 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m12:28:34.009988 [debug] [ThreadPool]: Redshift adapter: Establishing connection using ssl with `sslmode` set to 'prefer'.To connect without ssl, set `sslmode` to 'disable'.
[0m12:28:34.010292 [debug] [ThreadPool]: Redshift adapter: Connecting to redshift with username/password based auth...
[0m12:28:35.033487 [debug] [ThreadPool]: SQL status: SUCCESS in 1.0 seconds
[0m12:28:35.034910 [debug] [ThreadPool]: Using redshift connection "list_analytics_loads_staging"
[0m12:28:35.035885 [debug] [ThreadPool]: On list_analytics_loads_staging: /* {"app": "dbt", "dbt_version": "1.7.5", "profile_name": "dev", "target_name": "dev", "connection_name": "list_analytics_loads_staging"} */
select
        table_catalog as database,
        table_name as name,
        table_schema as schema,
        'table' as type
    from information_schema.tables
    where table_schema ilike 'loads_staging'
    and table_type = 'BASE TABLE'
    union all
    select
      table_catalog as database,
      table_name as name,
      table_schema as schema,
      case
        when view_definition ilike '%create materialized view%'
          then 'materialized_view'
        else 'view'
      end as type
    from information_schema.views
    where table_schema ilike 'loads_staging'
[0m12:28:35.295407 [debug] [ThreadPool]: SQL status: SUCCESS in 0.0 seconds
[0m12:28:35.298598 [debug] [ThreadPool]: On list_analytics_loads_staging: ROLLBACK
[0m12:28:35.538149 [debug] [ThreadPool]: On list_analytics_loads_staging: Close
[0m12:28:35.552668 [debug] [MainThread]: Using redshift connection "master"
[0m12:28:35.553246 [debug] [MainThread]: On master: BEGIN
[0m12:28:35.553591 [debug] [MainThread]: Opening a new connection, currently in state init
[0m12:28:35.554120 [debug] [MainThread]: Redshift adapter: Establishing connection using ssl with `sslmode` set to 'prefer'.To connect without ssl, set `sslmode` to 'disable'.
[0m12:28:35.554485 [debug] [MainThread]: Redshift adapter: Connecting to redshift with username/password based auth...
[0m12:28:36.445167 [debug] [MainThread]: SQL status: SUCCESS in 1.0 seconds
[0m12:28:36.446787 [debug] [MainThread]: Using redshift connection "master"
[0m12:28:36.448173 [debug] [MainThread]: On master: /* {"app": "dbt", "dbt_version": "1.7.5", "profile_name": "dev", "target_name": "dev", "connection_name": "master"} */
with
    relation as (
        select
            pg_class.oid as relation_id,
            pg_class.relname as relation_name,
            pg_class.relnamespace as schema_id,
            pg_namespace.nspname as schema_name,
            pg_class.relkind as relation_type
        from pg_class
        join pg_namespace
          on pg_class.relnamespace = pg_namespace.oid
        where pg_namespace.nspname != 'information_schema'
          and pg_namespace.nspname not like 'pg\_%'
    ),
    dependency as (
        select distinct
            coalesce(pg_rewrite.ev_class, pg_depend.objid) as dep_relation_id,
            pg_depend.refobjid as ref_relation_id,
            pg_depend.refclassid as ref_class_id
        from pg_depend
        left join pg_rewrite
          on pg_depend.objid = pg_rewrite.oid
        where coalesce(pg_rewrite.ev_class, pg_depend.objid) != pg_depend.refobjid
    )

select distinct
    dep.schema_name as dependent_schema,
    dep.relation_name as dependent_name,
    ref.schema_name as referenced_schema,
    ref.relation_name as referenced_name
from dependency
join relation ref
    on dependency.ref_relation_id = ref.relation_id
join relation dep
    on dependency.dep_relation_id = dep.relation_id
[0m12:28:36.828002 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m12:28:36.831983 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '43b5b2af-d4f7-462c-bcd2-46355d724219', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x106cd7d90>]}
[0m12:28:36.832875 [debug] [MainThread]: On master: ROLLBACK
[0m12:28:37.055652 [debug] [MainThread]: Using redshift connection "master"
[0m12:28:37.056521 [debug] [MainThread]: On master: BEGIN
[0m12:28:37.149272 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m12:28:37.150244 [debug] [MainThread]: On master: COMMIT
[0m12:28:37.151302 [debug] [MainThread]: Using redshift connection "master"
[0m12:28:37.152077 [debug] [MainThread]: On master: COMMIT
[0m12:28:37.337669 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m12:28:37.338128 [debug] [MainThread]: On master: Close
[0m12:28:37.338931 [info ] [MainThread]: Concurrency: 1 threads (target='dev')
[0m12:28:37.339235 [info ] [MainThread]: 
[0m12:28:37.341765 [debug] [Thread-1 (]: Began running node model.dev.organisations_created
[0m12:28:37.342154 [info ] [Thread-1 (]: 1 of 1 START sql table model loads_staging.organisations_created ............... [RUN]
[0m12:28:37.342697 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly list_analytics_loads_staging, now model.dev.organisations_created)
[0m12:28:37.342955 [debug] [Thread-1 (]: Began compiling node model.dev.organisations_created
[0m12:28:37.346157 [debug] [Thread-1 (]: Writing injected SQL for node "model.dev.organisations_created"
[0m12:28:37.346711 [debug] [Thread-1 (]: Timing info for model.dev.organisations_created (compile): 12:28:37.343108 => 12:28:37.346575
[0m12:28:37.346935 [debug] [Thread-1 (]: Began executing node model.dev.organisations_created
[0m12:28:37.374528 [debug] [Thread-1 (]: Writing runtime sql for node "model.dev.organisations_created"
[0m12:28:37.377336 [debug] [Thread-1 (]: Using redshift connection "model.dev.organisations_created"
[0m12:28:37.377530 [debug] [Thread-1 (]: On model.dev.organisations_created: BEGIN
[0m12:28:37.377684 [debug] [Thread-1 (]: Opening a new connection, currently in state closed
[0m12:28:37.377926 [debug] [Thread-1 (]: Redshift adapter: Establishing connection using ssl with `sslmode` set to 'prefer'.To connect without ssl, set `sslmode` to 'disable'.
[0m12:28:37.378094 [debug] [Thread-1 (]: Redshift adapter: Connecting to redshift with username/password based auth...
[0m12:28:38.282926 [debug] [Thread-1 (]: SQL status: SUCCESS in 1.0 seconds
[0m12:28:38.284864 [debug] [Thread-1 (]: Using redshift connection "model.dev.organisations_created"
[0m12:28:38.286021 [debug] [Thread-1 (]: On model.dev.organisations_created: /* {"app": "dbt", "dbt_version": "1.7.5", "profile_name": "dev", "target_name": "dev", "node_id": "model.dev.organisations_created"} */

  
    

  create  table
    "analytics"."loads_staging"."organisations_created__dbt_tmp"
    
    
    
  as (
    

WITH 
historic AS (
    SELECT *
    FROM "analytics"."source"."dbt_seeds_organizations"
),
created AS (
    SELECT _id AS organization_id,
           hubspottrackingcode AS hubspot_tracking_code,
           COALESCE(NAME, productname) AS organization_name,
           productname AS product_name,
           employees AS employee_bucket,
           website,
           planstouserpm AS plans_to_use_rpm,
           "references" AS reference,
           createdat AS created_at,
           updatedat AS updated_at,
           ROW_NUMBER() OVER (PARTITION BY hubspot_tracking_code ORDER BY updated_at DESC) AS row_number
    FROM "analytics"."source"."auth_service_v1_organization_created" 
),
created_dedup AS (
    SELECT *
    FROM created
    WHERE row_number = 1
),
combined AS (
    SELECT organization_id,
           hubspot_id,
           NULL AS hubspot_tracking_code,
           organization_name,
           product_name,
           employee_bucket,
           website,
           plans_to_use_rpm,
           reference,
           created_at::timestamp,
           updated_at::timestamp
    FROM historic
    UNION ALL
    SELECT organization_id,
           NULL AS hubspot_id,
           hubspot_tracking_code,
           organization_name,
           product_name,
           employee_bucket,
           website,
           plans_to_use_rpm,
           reference,
           created_at,
           updated_at
    FROM created_dedup
),
latest_organization_record AS (
    SELECT *,
           ROW_NUMBER() OVER (PARTITION BY organization_id ORDER BY updated_at DESC) AS row_number
    FROM combined
)
SELECT latest_organization_record.organization_id
     , latest_organization_record.hubspot_id
     , latest_organization_record.hubspot_tracking_code
     , latest_organization_record.organization_name
     , latest_organization_record.product_name
     , latest_organization_record.employee_bucket
     , latest_organization_record.website
     , latest_organization_record.plans_to_use_rpm
     , latest_organization_record.reference
     , latest_organization_record.created_at
     , latest_organization_record.updated_at
FROM latest_organization_record
WHERE row_number = 1
GROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11
  );
[0m12:28:53.852685 [debug] [Thread-1 (]: SQL status: SUCCESS in 16.0 seconds
[0m12:28:53.858316 [debug] [Thread-1 (]: On model.dev.organisations_created: COMMIT
[0m12:28:53.860045 [debug] [Thread-1 (]: Using redshift connection "model.dev.organisations_created"
[0m12:28:53.861269 [debug] [Thread-1 (]: On model.dev.organisations_created: COMMIT
[0m12:28:54.235966 [debug] [Thread-1 (]: SQL status: SUCCESS in 0.0 seconds
[0m12:28:54.237965 [debug] [Thread-1 (]: Using redshift connection "model.dev.organisations_created"
[0m12:28:54.239177 [debug] [Thread-1 (]: On model.dev.organisations_created: BEGIN
[0m12:28:54.362031 [debug] [Thread-1 (]: SQL status: SUCCESS in 0.0 seconds
[0m12:28:54.381228 [debug] [Thread-1 (]: Applying DROP to: "analytics"."loads_staging"."organisations_created"
[0m12:28:54.388475 [debug] [Thread-1 (]: Using redshift connection "model.dev.organisations_created"
[0m12:28:54.388993 [debug] [Thread-1 (]: On model.dev.organisations_created: /* {"app": "dbt", "dbt_version": "1.7.5", "profile_name": "dev", "target_name": "dev", "node_id": "model.dev.organisations_created"} */
drop view if exists "analytics"."loads_staging"."organisations_created" cascade
[0m12:28:54.675956 [debug] [Thread-1 (]: SQL status: SUCCESS in 0.0 seconds
[0m12:28:54.679519 [debug] [Thread-1 (]: On model.dev.organisations_created: COMMIT
[0m12:28:54.681033 [debug] [Thread-1 (]: Using redshift connection "model.dev.organisations_created"
[0m12:28:54.681716 [debug] [Thread-1 (]: On model.dev.organisations_created: COMMIT
[0m12:28:54.875686 [debug] [Thread-1 (]: SQL status: SUCCESS in 0.0 seconds
[0m12:28:54.877670 [debug] [Thread-1 (]: Using redshift connection "model.dev.organisations_created"
[0m12:28:54.878841 [debug] [Thread-1 (]: On model.dev.organisations_created: BEGIN
[0m12:28:54.979275 [debug] [Thread-1 (]: SQL status: SUCCESS in 0.0 seconds
[0m12:28:54.999966 [debug] [Thread-1 (]: Using redshift connection "model.dev.organisations_created"
[0m12:28:55.000821 [debug] [Thread-1 (]: On model.dev.organisations_created: /* {"app": "dbt", "dbt_version": "1.7.5", "profile_name": "dev", "target_name": "dev", "node_id": "model.dev.organisations_created"} */
alter table "analytics"."loads_staging"."organisations_created__dbt_tmp" rename to "organisations_created"
[0m12:28:55.789724 [debug] [Thread-1 (]: SQL status: SUCCESS in 1.0 seconds
[0m12:28:55.825267 [debug] [Thread-1 (]: On model.dev.organisations_created: COMMIT
[0m12:28:55.826037 [debug] [Thread-1 (]: Using redshift connection "model.dev.organisations_created"
[0m12:28:55.826363 [debug] [Thread-1 (]: On model.dev.organisations_created: COMMIT
[0m12:28:56.195814 [debug] [Thread-1 (]: SQL status: SUCCESS in 0.0 seconds
[0m12:28:56.197538 [debug] [Thread-1 (]: Using redshift connection "model.dev.organisations_created"
[0m12:28:56.198194 [debug] [Thread-1 (]: On model.dev.organisations_created: BEGIN
[0m12:28:56.394248 [debug] [Thread-1 (]: SQL status: SUCCESS in 0.0 seconds
[0m12:28:56.400320 [debug] [Thread-1 (]: Applying DROP to: "analytics"."loads_staging"."organisations_created__dbt_backup"
[0m12:28:56.403933 [debug] [Thread-1 (]: Using redshift connection "model.dev.organisations_created"
[0m12:28:56.404614 [debug] [Thread-1 (]: On model.dev.organisations_created: /* {"app": "dbt", "dbt_version": "1.7.5", "profile_name": "dev", "target_name": "dev", "node_id": "model.dev.organisations_created"} */
drop view if exists "analytics"."loads_staging"."organisations_created__dbt_backup" cascade
[0m12:28:56.611680 [debug] [Thread-1 (]: SQL status: SUCCESS in 0.0 seconds
[0m12:28:56.613378 [debug] [Thread-1 (]: On model.dev.organisations_created: COMMIT
[0m12:28:56.614489 [debug] [Thread-1 (]: Using redshift connection "model.dev.organisations_created"
[0m12:28:56.615065 [debug] [Thread-1 (]: On model.dev.organisations_created: COMMIT
[0m12:28:56.805957 [debug] [Thread-1 (]: SQL status: SUCCESS in 0.0 seconds
[0m12:28:56.807526 [debug] [Thread-1 (]: Using redshift connection "model.dev.organisations_created"
[0m12:28:56.808541 [debug] [Thread-1 (]: On model.dev.organisations_created: BEGIN
[0m12:28:56.907279 [debug] [Thread-1 (]: SQL status: SUCCESS in 0.0 seconds
[0m12:28:56.909974 [debug] [Thread-1 (]: Timing info for model.dev.organisations_created (execute): 12:28:37.347067 => 12:28:56.909740
[0m12:28:56.910478 [debug] [Thread-1 (]: On model.dev.organisations_created: ROLLBACK
[0m12:28:57.128950 [debug] [Thread-1 (]: On model.dev.organisations_created: Close
[0m12:28:57.130980 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '43b5b2af-d4f7-462c-bcd2-46355d724219', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1070b2150>]}
[0m12:28:57.132310 [info ] [Thread-1 (]: 1 of 1 OK created sql table model loads_staging.organisations_created .......... [[32mSUCCESS[0m in 19.79s]
[0m12:28:57.134174 [debug] [Thread-1 (]: Finished running node model.dev.organisations_created
[0m12:28:57.138189 [debug] [MainThread]: Using redshift connection "master"
[0m12:28:57.138727 [debug] [MainThread]: On master: BEGIN
[0m12:28:57.139160 [debug] [MainThread]: Opening a new connection, currently in state closed
[0m12:28:57.139964 [debug] [MainThread]: Redshift adapter: Establishing connection using ssl with `sslmode` set to 'prefer'.To connect without ssl, set `sslmode` to 'disable'.
[0m12:28:57.140508 [debug] [MainThread]: Redshift adapter: Connecting to redshift with username/password based auth...
[0m12:28:58.023380 [debug] [MainThread]: SQL status: SUCCESS in 1.0 seconds
[0m12:28:58.024687 [debug] [MainThread]: On master: COMMIT
[0m12:28:58.025490 [debug] [MainThread]: Using redshift connection "master"
[0m12:28:58.026057 [debug] [MainThread]: On master: COMMIT
[0m12:28:58.213740 [debug] [MainThread]: SQL status: SUCCESS in 0.0 seconds
[0m12:28:58.214123 [debug] [MainThread]: On master: Close
[0m12:28:58.214727 [debug] [MainThread]: Connection 'master' was properly closed.
[0m12:28:58.214887 [debug] [MainThread]: Connection 'model.dev.organisations_created' was properly closed.
[0m12:28:58.215081 [info ] [MainThread]: 
[0m12:28:58.215261 [info ] [MainThread]: Finished running 1 table model in 0 hours 0 minutes and 25.16 seconds (25.16s).
[0m12:28:58.215599 [debug] [MainThread]: Command end result
[0m12:28:58.227632 [info ] [MainThread]: 
[0m12:28:58.227875 [info ] [MainThread]: [32mCompleted successfully[0m
[0m12:28:58.228014 [info ] [MainThread]: 
[0m12:28:58.228156 [info ] [MainThread]: Done. PASS=1 WARN=0 ERROR=0 SKIP=0 TOTAL=1
[0m12:28:58.229607 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": true, "command_wall_clock_time": 25.636814, "process_user_time": 1.477666, "process_kernel_time": 0.16781, "process_mem_max_rss": "140034048", "process_in_blocks": "0", "process_out_blocks": "0"}
[0m12:28:58.229850 [debug] [MainThread]: Command `dbt run` succeeded at 12:28:58.229798 after 25.64 seconds
[0m12:28:58.230031 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x105dbdb50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x105647590>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1002e2110>]}
[0m12:28:58.230194 [debug] [MainThread]: Flushing usage events
